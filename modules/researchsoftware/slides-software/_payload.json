[{"data":1,"prerenderedAt":733},["Reactive",2],{"content-query-VQ0D2fQsLl":3,"content-query-AT44bg6JPw":567},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"type":10,"order":11,"body":12,"_type":561,"_id":562,"_source":563,"_file":564,"_extension":565,"plainText":566},"/modules/researchsoftware/slides-software","researchsoftware",false,"","What is software?","===","slides",1,{"type":13,"children":14,"toc":546},"root",[15,23,28,35,48,69,74,79,84,89,97,110,115,119,124,137,152,157,161,166,174,187,192,196,201,208,215,220,224,229,236,243,248,252,258,265,282,287,291,302,306,312,317,337,342,346,360,365,409,414,419,424,447,451,457,485,490,494,500,518,522,532,541],{"type":16,"tag":17,"props":18,"children":20},"element","h1",{"id":19},"what-is-software",[21],{"type":22,"value":8},"text",{"type":16,"tag":24,"props":25,"children":26},"p",{},[27],{"type":22,"value":9},{"type":16,"tag":29,"props":30,"children":32},"h2",{"id":31},"some-history",[33],{"type":22,"value":34},"Some history",{"type":16,"tag":36,"props":37,"children":38},"center",{},[39],{"type":16,"tag":40,"props":41,"children":47},"img",{"className":42,"src":44,"width":45,"dataRotate":46},[43],"rotate-90","media/Lochkarte_Tanzorgel_cutout.jpg","40%","90",[],{"type":16,"tag":49,"props":50,"children":51},"small",{},[52,54,61,63],{"type":22,"value":53},"Photo by ",{"type":16,"tag":55,"props":56,"children":58},"a",{"href":57},"https://www.wikidata.org/wiki/Q106975068",[59],{"type":22,"value":60},"Stefan Kuhn",{"type":22,"value":62}," on ",{"type":16,"tag":55,"props":64,"children":66},{"href":65},"https://commons.wikimedia.org/wiki/File:Lochkarte_Tanzorgel.jpg",[67],{"type":22,"value":68},"Wikimedia",{"type":16,"tag":24,"props":70,"children":71},{},[72],{"type":22,"value":73},"Note:\nWho knows what this is?",{"type":16,"tag":24,"props":75,"children":76},{},[77],{"type":22,"value":78},"See next slide for explanation.",{"type":16,"tag":24,"props":80,"children":81},{},[82],{"type":22,"value":83},"==",{"type":16,"tag":29,"props":85,"children":87},{"id":86},"some-history-1",[88],{"type":22,"value":34},{"type":16,"tag":36,"props":90,"children":91},{},[92],{"type":16,"tag":40,"props":93,"children":96},{"className":94,"src":95,"width":45},[],"media/Lochkarte_Tanzorgel.jpg",[],{"type":16,"tag":49,"props":98,"children":99},{},[100,101,105,106],{"type":22,"value":53},{"type":16,"tag":55,"props":102,"children":103},{"href":57},[104],{"type":22,"value":60},{"type":22,"value":62},{"type":16,"tag":55,"props":107,"children":108},{"href":65},[109],{"type":22,"value":68},{"type":16,"tag":24,"props":111,"children":112},{},[113],{"type":22,"value":114},"Note:\nA street organ's machinery is instructed by long \"books\" of cardboard with holes punched in it. Each hole triggers one specific note and/or instrument to play in the organ. In this way the organ can be \"programmed\" and the punch book can be considered the software of the organ.",{"type":16,"tag":24,"props":116,"children":117},{},[118],{"type":22,"value":83},{"type":16,"tag":29,"props":120,"children":122},{"id":121},"some-history-2",[123],{"type":22,"value":34},{"type":16,"tag":36,"props":125,"children":126},{},[127],{"type":16,"tag":128,"props":129,"children":136},"iframe",{"width":130,"height":131,"src":132,"title":7,"frameBorder":133,"allow":134,"allowFullScreen":135},560,315,"https://youtu.be/wbLuMd5zYww?si=3o0zptLY4c3i1ppk&t=275","0","accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",true,[],{"type":16,"tag":24,"props":138,"children":139},{},[140],{"type":16,"tag":49,"props":141,"children":142},{},[143,146],{"type":16,"tag":55,"props":144,"children":145},{"href":132},[],{"type":16,"tag":55,"props":147,"children":150},{"href":132,"rel":148},[149],"nofollow",[151],{"type":22,"value":132},{"type":16,"tag":24,"props":153,"children":154},{},[155],{"type":22,"value":156},"Note:\nA long book of cardboard with holes punched in it is used to give the barrel organ instructions on which mechanical instruments should play what note at which time.",{"type":16,"tag":24,"props":158,"children":159},{},[160],{"type":22,"value":9},{"type":16,"tag":29,"props":162,"children":164},{"id":163},"some-history-3",[165],{"type":22,"value":34},{"type":16,"tag":36,"props":167,"children":168},{},[169],{"type":16,"tag":40,"props":170,"children":173},{"src":171,"width":172},"media/Punch-card-cobol.jpg","55%",[],{"type":16,"tag":24,"props":175,"children":176},{},[177],{"type":16,"tag":49,"props":178,"children":179},{},[180,182],{"type":22,"value":181},"Photo by Rainer Gerhards on ",{"type":16,"tag":55,"props":183,"children":185},{"href":184},"https://commons.wikimedia.org/wiki/File:Punch-card-cobol.jpg",[186],{"type":22,"value":68},{"type":16,"tag":24,"props":188,"children":189},{},[190],{"type":22,"value":191},"Note:\nWho knows what this is? Looks similar to the previous thing, right? This is software.",{"type":16,"tag":24,"props":193,"children":194},{},[195],{"type":22,"value":83},{"type":16,"tag":29,"props":197,"children":199},{"id":198},"some-history-4",[200],{"type":22,"value":34},{"type":16,"tag":36,"props":202,"children":203},{},[204],{"type":16,"tag":128,"props":205,"children":207},{"width":130,"height":131,"src":206,"title":7,"frameBorder":133,"allow":134,"allowFullScreen":135},"https://youtu.be/kaQmAybWn-w?si=zRmBx4Df68gWuw3e&t=540",[],{"type":16,"tag":49,"props":209,"children":210},{},[211],{"type":16,"tag":55,"props":212,"children":213},{"href":206},[214],{"type":22,"value":206},{"type":16,"tag":24,"props":216,"children":217},{},[218],{"type":22,"value":219},"Note:\nThis software was written using special typewriters that would punch holes in cardboard cards. It would encode instructions to the computer hardware, in this case the hardware is a UNIVAC 90/30 (1974). One punchcard from the old UNIVAC 90/30 system would hold a single line of code. A program usually consisted of a whole stack of these cards.",{"type":16,"tag":24,"props":221,"children":222},{},[223],{"type":22,"value":83},{"type":16,"tag":29,"props":225,"children":227},{"id":226},"some-history-5",[228],{"type":22,"value":34},{"type":16,"tag":36,"props":230,"children":231},{},[232],{"type":16,"tag":128,"props":233,"children":235},{"width":130,"height":131,"src":234,"title":7,"frameBorder":133,"allow":134,"allowFullScreen":135},"https://youtu.be/SYpPPIsxq64?si=m__szsXBDI6SP5kx&t=793",[],{"type":16,"tag":49,"props":237,"children":238},{},[239],{"type":16,"tag":55,"props":240,"children":241},{"href":234},[242],{"type":22,"value":234},{"type":16,"tag":24,"props":244,"children":245},{},[246],{"type":22,"value":247},"Note:\nThese punchcards would be loaded into the computer to instruct which parts of the hardware should act in which way and when. In this video, you see an even older computer, the Harwell Dekatron or W.I.T.C.H. (1952), which reads its software from perforated paper tape.",{"type":16,"tag":24,"props":249,"children":250},{},[251],{"type":22,"value":9},{"type":16,"tag":29,"props":253,"children":255},{"id":254},"software-now",[256],{"type":22,"value":257},"Software now",{"type":16,"tag":36,"props":259,"children":260},{},[261],{"type":16,"tag":40,"props":262,"children":264},{"src":263,"width":172},"media/software-development.jpg",[],{"type":16,"tag":49,"props":266,"children":267},{},[268,269,275,276],{"type":22,"value":53},{"type":16,"tag":55,"props":270,"children":272},{"href":271},"https://unsplash.com/@cdr6934?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash",[273],{"type":22,"value":274},"Chris Ried",{"type":22,"value":62},{"type":16,"tag":55,"props":277,"children":279},{"href":278},"https://unsplash.com/photos/a-computer-screen-with-a-bunch-of-code-on-it-ieic5Tq8YMk?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash",[280],{"type":22,"value":281},"Unsplash",{"type":16,"tag":24,"props":283,"children":284},{},[285],{"type":22,"value":286},"Note:\nThese days, software usually gets written using a computer, in a text editor program, so the act of writing software requires software itself. The software is stored in memory and on a hard disk rather than on cardboard (remember, one card per line...), but it basically still does the same: Software is a set of instructions that tells hardware what to do.",{"type":16,"tag":24,"props":288,"children":289},{},[290],{"type":22,"value":83},{"type":16,"tag":24,"props":292,"children":293},{},[294,296],{"type":22,"value":295},"Note:\nOn this website you can experiment with writing software (python code) yourself:\n",{"type":16,"tag":55,"props":297,"children":300},{"href":298,"rel":299},"https://www.online-python.com",[149],[301],{"type":22,"value":298},{"type":16,"tag":24,"props":303,"children":304},{},[305],{"type":22,"value":9},{"type":16,"tag":29,"props":307,"children":309},{"id":308},"software-is-like-other-data",[310],{"type":22,"value":311},"Software is like other data",{"type":16,"tag":24,"props":313,"children":314},{},[315],{"type":22,"value":316},"Software is ...",{"type":16,"tag":318,"props":319,"children":320},"ul",{},[321,327,332],{"type":16,"tag":322,"props":323,"children":324},"li",{},[325],{"type":22,"value":326},"stored as bits",{"type":16,"tag":322,"props":328,"children":329},{},[330],{"type":22,"value":331},"read, loaded and processed",{"type":16,"tag":322,"props":333,"children":334},{},[335],{"type":22,"value":336},"can be input, and can be output",{"type":16,"tag":24,"props":338,"children":339},{},[340],{"type":22,"value":341},"Note:\nSoftware is stored as bits and read from disk, loaded into memory and processed in exactly the same way as other data. Software can be input, and software can be output. In fact, one of the major breakthroughs in computer science was when people realized that the instructions of the machine could be handled and stored the same as the data that it operated on.",{"type":16,"tag":24,"props":343,"children":344},{},[345],{"type":22,"value":9},{"type":16,"tag":29,"props":347,"children":349},{"id":348},"software-is-not-just-data",[350,352,358],{"type":22,"value":351},"Software is ",{"type":16,"tag":353,"props":354,"children":355},"u",{},[356],{"type":22,"value":357},"not",{"type":22,"value":359}," 'just' data",{"type":16,"tag":24,"props":361,"children":362},{},[363],{"type":22,"value":364},"Software is...",{"type":16,"tag":318,"props":366,"children":367},{},[368,379,389,399],{"type":16,"tag":322,"props":369,"children":370},{},[371,377],{"type":16,"tag":372,"props":373,"children":374},"strong",{},[375],{"type":22,"value":376},"complex",{"type":22,"value":378},": code is creatively generated, interconnected and multi-layered",{"type":16,"tag":322,"props":380,"children":381},{},[382,387],{"type":16,"tag":372,"props":383,"children":384},{},[385],{"type":22,"value":386},"interdependent",{"type":22,"value":388},": it builds upon and therefore depends on other software",{"type":16,"tag":322,"props":390,"children":391},{},[392,397],{"type":16,"tag":372,"props":393,"children":394},{},[395],{"type":22,"value":396},"executable",{"type":22,"value":398},": it is not static, but can be run (to process data)",{"type":16,"tag":322,"props":400,"children":401},{},[402,407],{"type":16,"tag":372,"props":403,"children":404},{},[405],{"type":22,"value":406},"dynamic",{"type":22,"value":408},": it can (and will) break soon, needs to be updated",{"type":16,"tag":24,"props":410,"children":411},{},[412],{"type":22,"value":413},"Note:\nWhile technically, software is a special kind of data (in that it is representation of information in a digital state), they are in essence quite different.",{"type":16,"tag":24,"props":415,"children":416},{},[417],{"type":22,"value":418},"Software and data both are digital objects, sharing certain characteristics: they can be assigned a DOI, and they can have a license.",{"type":16,"tag":24,"props":420,"children":421},{},[422],{"type":22,"value":423},"Software is quite different from data, however. Consider:",{"type":16,"tag":318,"props":425,"children":426},{},[427,432,437,442],{"type":16,"tag":322,"props":428,"children":429},{},[430],{"type":22,"value":431},"Complexity; it is not a single file, but a collection of files that are interconnected and multi-layered, and do not necessarily stand on their own. Software is also the result of a creative process that provides a tool to do something, and not the result of a measurement or observation.",{"type":16,"tag":322,"props":433,"children":434},{},[435],{"type":22,"value":436},"Interdependence; software is often built using other software, and rarely built completely from scratch. This makes it dependent on other existing applications, which themselves may also change over time.",{"type":16,"tag":322,"props":438,"children":439},{},[440],{"type":22,"value":441},"Executability; software is in its dryest form a set of instructions that can be an archive of a procedure. However, the main goal of software is that these instructions can be executed. Data, by contrast, stand on their own.",{"type":16,"tag":322,"props":443,"children":444},{},[445],{"type":22,"value":446},"Dynamic vs static; its interdependence and context-dependency drives software to require maintenance to retain its value, and this maintenance is not straightforward. Maintenance is also counter to academic culture; it does not fit in existing structures (both in terms of reward/recognition, but also in terms of funding and understanding of what is needed). Versioning of software is very common, while data is often static (though versions may happen).",{"type":16,"tag":24,"props":448,"children":449},{},[450],{"type":22,"value":9},{"type":16,"tag":29,"props":452,"children":454},{"id":453},"software-vs-data-management",[455],{"type":22,"value":456},"Software vs data management",{"type":16,"tag":318,"props":458,"children":459},{},[460,470,475,480],{"type":16,"tag":322,"props":461,"children":462},{},[463,465],{"type":22,"value":464},"Software is a ",{"type":16,"tag":372,"props":466,"children":467},{},[468],{"type":22,"value":469},"living thing",{"type":16,"tag":322,"props":471,"children":472},{},[473],{"type":22,"value":474},"Some FAIR data management practices apply to software",{"type":16,"tag":322,"props":476,"children":477},{},[478],{"type":22,"value":479},"Many FAIR principles do not apply easily to software",{"type":16,"tag":322,"props":481,"children":482},{},[483],{"type":22,"value":484},"Good data management will not ensure good software management",{"type":16,"tag":24,"props":486,"children":487},{},[488],{"type":22,"value":489},"Note:\nThe different nature of software also provides opportunities but also requires extra thought on its management.\nSoftware is a living thing, and therefore it is easier to adopt good practices early on.\nCrucially, there is a community driven openness in software that long predates the open science movement.\nThis is not to say that software is inherently open, but that there is a broad open culture, which also comes with existing tools and pathways to facilitate openness and transparency.\nConsider GitHub (and other code hosting platforms), which are designed for this purpose.\nConsider also version control software, a good software development practice that builds in provenance.",{"type":16,"tag":24,"props":491,"children":492},{},[493],{"type":22,"value":9},{"type":16,"tag":29,"props":495,"children":497},{"id":496},"take-home-messages",[498],{"type":22,"value":499},"Take home messages",{"type":16,"tag":318,"props":501,"children":502},{},[503,508,513],{"type":16,"tag":322,"props":504,"children":505},{},[506],{"type":22,"value":507},"Software are the instructions that tell the hardware (computer) what to do",{"type":16,"tag":322,"props":509,"children":510},{},[511],{"type":22,"value":512},"Software is a 'living thing'",{"type":16,"tag":322,"props":514,"children":515},{},[516],{"type":22,"value":517},"We need extra and different techniques for good software management",{"type":16,"tag":24,"props":519,"children":520},{},[521],{"type":22,"value":9},{"type":16,"tag":24,"props":523,"children":524},{},[525],{"type":16,"tag":55,"props":526,"children":529},{"href":527,"rel":528},"http://www.esciencecenter.nl",[149],[530],{"type":22,"value":531},"www.esciencecenter.nl",{"type":16,"tag":24,"props":533,"children":534},{},[535],{"type":16,"tag":55,"props":536,"children":538},{"href":537},"mailto:info@esciencecenter.nl",[539],{"type":22,"value":540},"info@esciencecenter.nl",{"type":16,"tag":24,"props":542,"children":543},{},[544],{"type":22,"value":545},"020 - 460 47 70",{"title":7,"searchDepth":547,"depth":547,"links":548},2,[549,550,551,552,553,554,555,556,557,559,560],{"id":31,"depth":547,"text":34},{"id":86,"depth":547,"text":34},{"id":121,"depth":547,"text":34},{"id":163,"depth":547,"text":34},{"id":198,"depth":547,"text":34},{"id":226,"depth":547,"text":34},{"id":254,"depth":547,"text":257},{"id":308,"depth":547,"text":311},{"id":348,"depth":547,"text":558},"Software is not 'just' data",{"id":453,"depth":547,"text":456},{"id":496,"depth":547,"text":499},"markdown","local_fs:modules:researchsoftware:slides-software.md","local_fs","modules/researchsoftware/slides-software.md","md","---\ntitle: What is software?\ntype: slides\norder: 1\n---\n\n\u003C!-- .slide: data-state=\"title\" -->\n\n# What is software?\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Some history\n\u003Ccenter>\n\u003Cimg class=\"rotate-90\" src=\"media/Lochkarte_Tanzorgel_cutout.jpg\"  width=\"40%\" data-rotate=\"90\">\n\u003C/center>\n\u003Csmall>Photo by \u003Ca href=\"https://www.wikidata.org/wiki/Q106975068\">Stefan Kuhn\u003C/a> on \u003Ca href=\"https://commons.wikimedia.org/wiki/File:Lochkarte_Tanzorgel.jpg\">Wikimedia\u003C/a>\n\u003C/small>\n\n\nNote:\nWho knows what this is?\n\nSee next slide for explanation.\n\n==\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Some history\n\u003Ccenter>\n\u003Cimg class=\"\" src=\"media/Lochkarte_Tanzorgel.jpg\"  width=\"40%\">\n\u003C/center>\n\u003Csmall>Photo by \u003Ca href=\"https://www.wikidata.org/wiki/Q106975068\">Stefan Kuhn\u003C/a> on \u003Ca href=\"https://commons.wikimedia.org/wiki/File:Lochkarte_Tanzorgel.jpg\">Wikimedia\u003C/a>\n\u003C/small>\n\n\nNote:\nA street organ's machinery is instructed by long \"books\" of cardboard with holes punched in it. Each hole triggers one specific note and/or instrument to play in the organ. In this way the organ can be \"programmed\" and the punch book can be considered the software of the organ.\n\n==\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Some history\n\u003Ccenter>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://youtu.be/wbLuMd5zYww?si=3o0zptLY4c3i1ppk&t=275\" title=\"\" frameBorder=\"0\"   allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"  allowFullScreen>\u003C/iframe>\n\u003C/center>\n\n\u003Csmall>\u003Ca href=\"https://youtu.be/wbLuMd5zYww?si=3o0zptLY4c3i1ppk&t=275\">https://youtu.be/wbLuMd5zYww?si=3o0zptLY4c3i1ppk&t=275\u003C/a>\n\u003C/small>\n\n\u003C!-- Speaker notes -->\nNote:\nA long book of cardboard with holes punched in it is used to give the barrel organ instructions on which mechanical instruments should play what note at which time. \n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Some history\n\n\u003Ccenter>\n\u003Cimg src=\"media/Punch-card-cobol.jpg\" width=\"55%\">\n\u003C/center>\n\n\u003Csmall>Photo by Rainer Gerhards on \u003Ca href=\"https://commons.wikimedia.org/wiki/File:Punch-card-cobol.jpg\">Wikimedia\u003C/a>\n\u003C/small>\n\n\n\u003C!-- Speaker notes -->\nNote:\nWho knows what this is? Looks similar to the previous thing, right? This is software.\n\n==\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Some history\n\n\u003Ccenter>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://youtu.be/kaQmAybWn-w?si=zRmBx4Df68gWuw3e&t=540\" title=\"\" frameBorder=\"0\"   allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"  allowFullScreen>\u003C/iframe>\n\u003C/center>\n\u003Csmall>\u003Ca href=\"https://youtu.be/kaQmAybWn-w?si=zRmBx4Df68gWuw3e&t=540\">https://youtu.be/kaQmAybWn-w?si=zRmBx4Df68gWuw3e&t=540\u003C/a>\n\u003C/small>\n\n\u003C!-- Speaker notes -->\nNote:\nThis software was written using special typewriters that would punch holes in cardboard cards. It would encode instructions to the computer hardware, in this case the hardware is a UNIVAC 90/30 (1974). One punchcard from the old UNIVAC 90/30 system would hold a single line of code. A program usually consisted of a whole stack of these cards.\n\n==\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Some history\n\n\u003Ccenter>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://youtu.be/SYpPPIsxq64?si=m__szsXBDI6SP5kx&t=793\" title=\"\" frameBorder=\"0\"   allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"  allowFullScreen>\u003C/iframe>\n\u003C/center>\n\u003Csmall>\u003Ca href=\"https://youtu.be/SYpPPIsxq64?si=m__szsXBDI6SP5kx&t=793\">https://youtu.be/SYpPPIsxq64?si=m__szsXBDI6SP5kx&t=793\u003C/a>\n\u003C/small>\n\n\u003C!-- Speaker notes -->\nNote:\nThese punchcards would be loaded into the computer to instruct which parts of the hardware should act in which way and when. In this video, you see an even older computer, the Harwell Dekatron or W.I.T.C.H. (1952), which reads its software from perforated paper tape. \n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Software now\n\n\u003Ccenter>\n\u003Cimg src=\"media/software-development.jpg\" width=\"55%\">\n\u003C/center>\n\u003Csmall>Photo by \u003Ca href=\"https://unsplash.com/@cdr6934?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">Chris Ried\u003C/a> on \u003Ca href=\"https://unsplash.com/photos/a-computer-screen-with-a-bunch-of-code-on-it-ieic5Tq8YMk?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">Unsplash\u003C/a>\u003C/small>\n  \n\u003C!-- Speaker notes -->\nNote:\nThese days, software usually gets written using a computer, in a text editor program, so the act of writing software requires software itself. The software is stored in memory and on a hard disk rather than on cardboard (remember, one card per line...), but it basically still does the same: Software is a set of instructions that tells hardware what to do.\n\n==\n\n\u003C!-- .slide: data-state=\"empty-slide\" data-background-iframe=\"https://www.online-python.com/\" -->\n\n\u003C!-- Speaker notes -->\nNote:\nOn this website you can experiment with writing software (python code) yourself: \nhttps://www.online-python.com\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Software is like other data\n\nSoftware is ...\n\n- stored as bits \n- read, loaded and processed\n- can be input, and can be output\n\n\n\u003C!-- Speaker notes -->\nNote:\nSoftware is stored as bits and read from disk, loaded into memory and processed in exactly the same way as other data. Software can be input, and software can be output. In fact, one of the major breakthroughs in computer science was when people realized that the instructions of the machine could be handled and stored the same as the data that it operated on. \n\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Software is \u003Cu>not\u003C/u> 'just' data\n\nSoftware is...\n\n- **complex**: code is creatively generated, interconnected and multi-layered\n- **interdependent**: it builds upon and therefore depends on other software\n- **executable**: it is not static, but can be run (to process data)\n- **dynamic**: it can (and will) break soon, needs to be updated \n\n\u003C!-- Speaker notes -->\nNote:\nWhile technically, software is a special kind of data (in that it is representation of information in a digital state), they are in essence quite different.\n\nSoftware and data both are digital objects, sharing certain characteristics: they can be assigned a DOI, and they can have a license.\n\nSoftware is quite different from data, however. Consider:\n\n- Complexity; it is not a single file, but a collection of files that are interconnected and multi-layered, and do not necessarily stand on their own. Software is also the result of a creative process that provides a tool to do something, and not the result of a measurement or observation.\n- Interdependence; software is often built using other software, and rarely built completely from scratch. This makes it dependent on other existing applications, which themselves may also change over time.\n- Executability; software is in its dryest form a set of instructions that can be an archive of a procedure. However, the main goal of software is that these instructions can be executed. Data, by contrast, stand on their own.\n- Dynamic vs static; its interdependence and context-dependency drives software to require maintenance to retain its value, and this maintenance is not straightforward. Maintenance is also counter to academic culture; it does not fit in existing structures (both in terms of reward/recognition, but also in terms of funding and understanding of what is needed). Versioning of software is very common, while data is often static (though versions may happen).\n\n===\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Software vs data management\n\n- Software is a **living thing**\n- Some FAIR data management practices apply to software\n- Many FAIR principles do not apply easily to software\n- Good data management will not ensure good software management\n\nNote:\nThe different nature of software also provides opportunities but also requires extra thought on its management.\nSoftware is a living thing, and therefore it is easier to adopt good practices early on.\nCrucially, there is a community driven openness in software that long predates the open science movement.\nThis is not to say that software is inherently open, but that there is a broad open culture, which also comes with existing tools and pathways to facilitate openness and transparency.\nConsider GitHub (and other code hosting platforms), which are designed for this purpose.\nConsider also version control software, a good software development practice that builds in provenance.\n\n===\n\n\n\u003C!-- .slide: data-state=\"standard\" -->\n\n## Take home messages\n\n- Software are the instructions that tell the hardware (computer) what to do\n- Software is a 'living thing'\n- We need extra and different techniques for good software management\n\n===\n\n\u003C!-- .slide: data-state=\"keepintouch\" -->\n\n\nwww.esciencecenter.nl\n\ninfo@esciencecenter.nl\n\n020 - 460 47 70\n",[568,603],{"_path":569,"_dir":570,"_draft":6,"_partial":6,"_locale":7,"title":571,"description":7,"body":572,"_type":561,"_id":600,"_source":563,"_file":601,"_extension":565,"plainText":602},"/main/about","main","About",{"type":13,"children":573,"toc":596},[574,580,585,591],{"type":16,"tag":29,"props":575,"children":577},{"id":576},"about-the-research-software-support",[578],{"type":22,"value":579},"About the Research Software Support",{"type":16,"tag":24,"props":581,"children":582},{},[583],{"type":22,"value":584},"In the Research Software Support modules we want to provide a comprehensive overview of the different aspects of research software support.",{"type":16,"tag":29,"props":586,"children":588},{"id":587},"target-audience",[589],{"type":22,"value":590},"Target audience",{"type":16,"tag":24,"props":592,"children":593},{},[594],{"type":22,"value":595},"The target audience for this material is University management and support staff.\nUniversity management taking part in courses involving these modules may be involved in creating university policy around research software.\nThe University support staff targeted are not themselves researchers or software engineers, but they support researchers and research software engineers in creating research software.",{"title":7,"searchDepth":547,"depth":547,"links":597},[598,599],{"id":576,"depth":547,"text":579},{"id":587,"depth":547,"text":590},"local_fs:main:about.md","main/about.md","---\ntitle: About\n---\n\n## About the Research Software Support\nIn the Research Software Support modules we want to provide a comprehensive overview of the different aspects of research software support.\n\n## Target audience\n\nThe target audience for this material is University management and support staff.\nUniversity management taking part in courses involving these modules may be involved in creating university policy around research software.\nThe University support staff targeted are not themselves researchers or software engineers, but they support researchers and research software engineers in creating research software.",{"_path":604,"_dir":570,"_draft":6,"_partial":6,"_locale":7,"title":605,"description":7,"body":606,"_type":561,"_id":730,"_source":563,"_file":731,"_extension":565,"plainText":732},"/main/contribute","Contribute",{"type":13,"children":607,"toc":724},[608,614,619,626,631],{"type":16,"tag":29,"props":609,"children":611},{"id":610},"contributing-to-the-research-software-support",[612],{"type":22,"value":613},"Contributing to the Research Software Support",{"type":16,"tag":24,"props":615,"children":616},{},[617],{"type":22,"value":618},"In the Research Software Support modules we want to provide a comprehensive overview of the different aspects of research software support.\nThis, as you can imagine, is no easy feat, and we need your help!\nSo first of all, thank you very much for your interest in contributing to this project.",{"type":16,"tag":620,"props":621,"children":623},"h3",{"id":622},"what-can-i-do",[624],{"type":22,"value":625},"What can I do?",{"type":16,"tag":24,"props":627,"children":628},{},[629],{"type":22,"value":630},"Go to our github repository by clicking on the GitHub logo in the top right of this website.",{"type":16,"tag":318,"props":632,"children":633},{},[634,648,689,712],{"type":16,"tag":322,"props":635,"children":636},{},[637,639,646],{"type":22,"value":638},"Contribute to the content discussion in the ",{"type":16,"tag":55,"props":640,"children":643},{"href":641,"rel":642},"https://github.com/esciencecenter-digital-skills/research-software-support/issues?q=is%3Aissue+is%3Aopen+label%3Astory",[149],[644],{"type":22,"value":645},"chapter issues",{"type":22,"value":647},", e.g. by listing good resources for information.",{"type":16,"tag":322,"props":649,"children":650},{},[651,657,659],{"type":16,"tag":55,"props":652,"children":654},{"href":653},"#elements-of-a-module",[655],{"type":22,"value":656},"Author a lesson",{"type":22,"value":658},", e.g. by:\n",{"type":16,"tag":318,"props":660,"children":661},{},[662,671,680],{"type":16,"tag":322,"props":663,"children":664},{},[665],{"type":16,"tag":55,"props":666,"children":668},{"href":667},"#slides",[669],{"type":22,"value":670},"Creating slides",{"type":16,"tag":322,"props":672,"children":673},{},[674],{"type":16,"tag":55,"props":675,"children":677},{"href":676},"#exercises",[678],{"type":22,"value":679},"Designing an exercise",{"type":16,"tag":322,"props":681,"children":682},{},[683],{"type":16,"tag":55,"props":684,"children":686},{"href":685},"#online-resources",[687],{"type":22,"value":688},"Curating online resources",{"type":16,"tag":322,"props":690,"children":691},{},[692,694,701,703,710],{"type":22,"value":693},"Review a lesson module; both by looking at ",{"type":16,"tag":55,"props":695,"children":698},{"href":696,"rel":697},"https://github.com/esciencecenter-digital-skills/research-software-support/pulls",[149],[699],{"type":22,"value":700},"open PRs",{"type":22,"value":702},", as well as flagging issues for improvement in the ",{"type":16,"tag":55,"props":704,"children":707},{"href":705,"rel":706},"https://esciencecenter-digital-skills.github.io/research-software-support/",[149],[708],{"type":22,"value":709},"existing content",{"type":22,"value":711},".",{"type":16,"tag":322,"props":713,"children":714},{},[715,722],{"type":16,"tag":55,"props":716,"children":719},{"href":717,"rel":718},"https://github.com/esciencecenter-digital-skills/research-software-support/issues",[149],[720],{"type":22,"value":721},"Provide feedback",{"type":22,"value":723}," on the different subjects covered: what did we miss? Should something be restructured?",{"title":7,"searchDepth":547,"depth":547,"links":725},[726],{"id":610,"depth":547,"text":613,"children":727},[728],{"id":622,"depth":729,"text":625},3,"local_fs:main:contribute.md","main/contribute.md","---\ntitle: Contribute\n---\n\n## Contributing to the Research Software Support\n\nIn the Research Software Support modules we want to provide a comprehensive overview of the different aspects of research software support.\nThis, as you can imagine, is no easy feat, and we need your help!\nSo first of all, thank you very much for your interest in contributing to this project.\n\n### What can I do?\n\nGo to our github repository by clicking on the GitHub logo in the top right of this website. \n\n* Contribute to the content discussion in the [chapter issues](https://github.com/esciencecenter-digital-skills/research-software-support/issues?q=is%3Aissue+is%3Aopen+label%3Astory), e.g. by listing good resources for information.\n* [Author a lesson](#elements-of-a-module), e.g. by:\n  * [Creating slides](#slides)\n  * [Designing an exercise](#exercises)\n  * [Curating online resources](#online-resources)\n* Review a lesson module; both by looking at [open PRs](https://github.com/esciencecenter-digital-skills/research-software-support/pulls), as well as flagging issues for improvement in the [existing content](https://esciencecenter-digital-skills.github.io/research-software-support/).\n* [Provide feedback](https://github.com/esciencecenter-digital-skills/research-software-support/issues) on the different subjects covered: what did we miss? Should something be restructured?",1725465515252]