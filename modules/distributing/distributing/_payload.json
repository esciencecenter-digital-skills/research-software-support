[{"data":1,"prerenderedAt":856},["ShallowReactive",2],{"content-query-x8AGI9YYV4":3,"content-query-AT44bg6JPw":151},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"type":10,"order":11,"body":12,"_type":144,"_id":145,"_source":146,"_file":147,"_stem":148,"_extension":149,"plainText":150},"/modules/distributing/distributing","distributing",false,"","Distributing Software","How do you make it easy for someone else to obtain a copy and get it set up on their computer so that they can use it?","reading",4,{"type":13,"children":14,"toc":138},"root",[15,24,29,34,41,46,51,56,61,66,71,77,82,87,92,97,102,108,121,133],{"type":16,"tag":17,"props":18,"children":20},"element","h1",{"id":19},"distributing-software-10-minutes",[21],{"type":22,"value":23},"text","Distributing software (10 minutes)",{"type":16,"tag":25,"props":26,"children":27},"p",{},[28],{"type":22,"value":9},{"type":16,"tag":25,"props":30,"children":31},{},[32],{"type":22,"value":33},"Modern software contsists of an often large collection of components (libraries, packages) that are combined together to form an application. This whole collection needs to be reproduced on the computer of the user for things to work. There are two ways of doing that: 1) combining them all together on the computer of the developer, and then wrapping everything up into a package, installer, container image, or VM image that is sent to the user, or 2) putting the components that you made yourself on the Internet (as a package), and relying on the user to download the other components (packages) and assembling it all together into a working application.",{"type":16,"tag":35,"props":36,"children":38},"h2",{"id":37},"monolithic-applications",[39],{"type":22,"value":40},"Monolithic applications",{"type":16,"tag":25,"props":42,"children":43},{},[44],{"type":22,"value":45},"Option 1) works for applications, which are more or less independent. If they're used together, then it's by saving a file from one and opening it in another application. Each application contains all the bits it needs, and is installed on the user's computer in a separate folder, away from everything else. That means that different applications don't get in each other's way, but it's also rather inefficient if many applications use the same component, because you end up with many copies of that component.",{"type":16,"tag":25,"props":47,"children":48},{},[49],{"type":22,"value":50},"If you do choose option 1), then you still have a choice between making a package, an installer, a container image, or a virtual machine image. A package is an archive (think a ZIP-file, which it often literally is) that contains, in this case, all the components needed by the application. Since it's just a file, a package needs to be installed by a special program called a package manager. The App Store or Play Store on your phone is such a program.",{"type":16,"tag":25,"props":52,"children":53},{},[54],{"type":22,"value":55},"An installer is itself a computer program, that also contains all the components needed by the application. It gets downloaded by the user, who then runs it, after which it copies all the components from within itself onto the user's computer. It can then run there just like an application installed from a package using a package manager.",{"type":16,"tag":25,"props":57,"children":58},{},[59],{"type":22,"value":60},"A container image is a special kind of package. It also contains all the parts needed to run a program, but it is run in a special isolated environment called a container. A normal application can access everything else on the computer, including files and parts of other applications. It's set up to use its own components of course, but it could access other things if it wanted or needed to. An application that runs in a container can't do this, it's isolated from everything else except for the operating system. This is an advantage for example if the software runs on a server that is accessible from the Internet, because it provides some security. It also makes it easy to run many copies of the software on many servers, so that you can serve many users.",{"type":16,"tag":25,"props":62,"children":63},{},[64],{"type":22,"value":65},"A Virtual Machine finally is even more isolated. It contains its own operating system together with the application, so that the running application cannot even access the operating system on the user's computer. This has similar advantages as a container, being more secure, but it's also slower than using containers.",{"type":16,"tag":25,"props":67,"children":68},{},[69],{"type":22,"value":70},"So these are the different ways option 1), distributing a monolithic application with everything included, can be implemented. As said, this reduces potential compatibility problems, but isn't very efficient because you end up with many copies of everything.",{"type":16,"tag":35,"props":72,"children":74},{"id":73},"separate-packages",[75],{"type":22,"value":76},"Separate packages",{"type":16,"tag":25,"props":78,"children":79},{},[80],{"type":22,"value":81},"Option 2) is more efficient than option 1), because the user can just install each component once, and then every other component that needs it can use it. There are drawbacks here as well though. First, the user needs to figure out which components are needed for a particular application, and then install them one by one. This puts them in an unpleasant place called \"dependency hell\".",{"type":16,"tag":25,"props":83,"children":84},{},[85],{"type":22,"value":86},"Dependency hell was mostly solved by the invention of package managers, which automate the process of downloading and installing the required components. Example are pip, conda, apt, and Homebrew. If each component is put into a package with some metadata that describes which other packages it needs, then the package manager can do all that automatically, at least assuming that everything is Open Source and freely available online, because it cannot go to the shop to buy a license for everything. Still, often everything is Open Source and then this saves a huge amount of work. Dependency hell is not the only problem however.",{"type":16,"tag":25,"props":88,"children":89},{},[90],{"type":22,"value":91},"Software is continuously developed, and that means that it changes over time. Those changes sometimes change how a component is used by other components, which then need to be updated too. So the user may end up with an older program that only works with an older version of component X, while they also want to used a different newer program that works only with a newer version of X. A good package manager will give an error message in that case, but that doesn't solve the problem. Which version do you install?",{"type":16,"tag":25,"props":93,"children":94},{},[95],{"type":22,"value":96},"There are again two common solutions to this, distributions and environments. A distribution, like Ubuntu, is made by a group of people who create a collection of packages that are all compatible with each other, meaning that every package in it that uses package X works with the same version of package X, namely the one that's included in the distribution. This takes a significant amount of work, but it's very nice because you only have one version of everything, and maximal space efficiency. Of course there are still updates, but they happen once every six months or several years, and then everything is updated at once. That does mean that you don't get the latest version right away, but also that things just work and don't suddenly break. (Cathedral!)",{"type":16,"tag":25,"props":98,"children":99},{},[100],{"type":22,"value":101},"Another way to fix the multiple options of X problem is to use environments. An environment is a separate part of the computer into which packages can be installed, in such a way that only packages within the environment are combined. So now you can install one application in one environment with one version of X, and the other application in another environment with another version of X. That costs more disk space, but it's easier to get the latest stuff, and it doesn't require all the work of constantly ensuring everything is compatible. So this makes option 2) look a bit more like option 1) again, although you can still have fewer environments than you have applications. (Bazaar!)",{"type":16,"tag":35,"props":103,"children":105},{"id":104},"which-option-to-choose-when",[106],{"type":22,"value":107},"Which option to choose when",{"type":16,"tag":25,"props":109,"children":110},{},[111,113,119],{"type":22,"value":112},"Scientific software is often a script, which is basically the topmost component in the whole collection of components. Scripts mostly just tell other components what to do. Since the script isn't used by other components, it can be packaged as an application in either of the above-mentioned ways. Users can the install and run it to ",{"type":16,"tag":114,"props":115,"children":116},"em",{},[117],{"type":22,"value":118},"reproduce",{"type":22,"value":120}," the results, but not easily use it in their own script or modify it to do something different but related.",{"type":16,"tag":25,"props":122,"children":123},{},[124,126,131],{"type":22,"value":125},"Sometimes, scientists (or Research Software Engineers!) develop components that are intended for use by others in their scripts, or even in other components. Those need to be packaged as packages for a package manager, because they need to be combined with other packages on the user's computer. (The user is a programmer, in this case!) This allows the software to be ",{"type":16,"tag":114,"props":127,"children":128},{},[129],{"type":22,"value":130},"reused",{"type":22,"value":132}," by others in their scripts.",{"type":16,"tag":25,"props":134,"children":135},{},[136],{"type":22,"value":137},"Finally, for others to be able to modify the software and perhaps contribute some new feature or fixes back to it, the source code of the software needs to be available through a public repository. Package managers and installers don't normally install software in a way that makes it easy to modify, as that's not what they're designed for. To be able to modify the software, you need the source code, in a version control system. So besides in a package or container repository, don't forget to make a public git repository too!",{"title":7,"searchDepth":139,"depth":139,"links":140},2,[141,142,143],{"id":37,"depth":139,"text":40},{"id":73,"depth":139,"text":76},{"id":104,"depth":139,"text":107},"markdown","local_fs:modules:distributing:distributing.md","local_fs","modules/distributing/distributing.md","modules/distributing/distributing","md","---\ntitle: Distributing Software\ntype: reading\norder: 4\n---\n\n# Distributing software (10 minutes)\n\nHow do you make it easy for someone else to obtain a copy and get it set up on their computer so that they can use it?\n\nModern software contsists of an often large collection of components (libraries, packages) that are combined together to form an application. This whole collection needs to be reproduced on the computer of the user for things to work. There are two ways of doing that: 1) combining them all together on the computer of the developer, and then wrapping everything up into a package, installer, container image, or VM image that is sent to the user, or 2) putting the components that you made yourself on the Internet (as a package), and relying on the user to download the other components (packages) and assembling it all together into a working application.\n\n## Monolithic applications\n\nOption 1) works for applications, which are more or less independent. If they're used together, then it's by saving a file from one and opening it in another application. Each application contains all the bits it needs, and is installed on the user's computer in a separate folder, away from everything else. That means that different applications don't get in each other's way, but it's also rather inefficient if many applications use the same component, because you end up with many copies of that component.\n\nIf you do choose option 1), then you still have a choice between making a package, an installer, a container image, or a virtual machine image. A package is an archive (think a ZIP-file, which it often literally is) that contains, in this case, all the components needed by the application. Since it's just a file, a package needs to be installed by a special program called a package manager. The App Store or Play Store on your phone is such a program.\n\nAn installer is itself a computer program, that also contains all the components needed by the application. It gets downloaded by the user, who then runs it, after which it copies all the components from within itself onto the user's computer. It can then run there just like an application installed from a package using a package manager.\n\nA container image is a special kind of package. It also contains all the parts needed to run a program, but it is run in a special isolated environment called a container. A normal application can access everything else on the computer, including files and parts of other applications. It's set up to use its own components of course, but it could access other things if it wanted or needed to. An application that runs in a container can't do this, it's isolated from everything else except for the operating system. This is an advantage for example if the software runs on a server that is accessible from the Internet, because it provides some security. It also makes it easy to run many copies of the software on many servers, so that you can serve many users.\n\nA Virtual Machine finally is even more isolated. It contains its own operating system together with the application, so that the running application cannot even access the operating system on the user's computer. This has similar advantages as a container, being more secure, but it's also slower than using containers.\n\nSo these are the different ways option 1), distributing a monolithic application with everything included, can be implemented. As said, this reduces potential compatibility problems, but isn't very efficient because you end up with many copies of everything.\n\n## Separate packages\n\nOption 2) is more efficient than option 1), because the user can just install each component once, and then every other component that needs it can use it. There are drawbacks here as well though. First, the user needs to figure out which components are needed for a particular application, and then install them one by one. This puts them in an unpleasant place called \"dependency hell\".\n\nDependency hell was mostly solved by the invention of package managers, which automate the process of downloading and installing the required components. Example are pip, conda, apt, and Homebrew. If each component is put into a package with some metadata that describes which other packages it needs, then the package manager can do all that automatically, at least assuming that everything is Open Source and freely available online, because it cannot go to the shop to buy a license for everything. Still, often everything is Open Source and then this saves a huge amount of work. Dependency hell is not the only problem however.\n\nSoftware is continuously developed, and that means that it changes over time. Those changes sometimes change how a component is used by other components, which then need to be updated too. So the user may end up with an older program that only works with an older version of component X, while they also want to used a different newer program that works only with a newer version of X. A good package manager will give an error message in that case, but that doesn't solve the problem. Which version do you install?\n\nThere are again two common solutions to this, distributions and environments. A distribution, like Ubuntu, is made by a group of people who create a collection of packages that are all compatible with each other, meaning that every package in it that uses package X works with the same version of package X, namely the one that's included in the distribution. This takes a significant amount of work, but it's very nice because you only have one version of everything, and maximal space efficiency. Of course there are still updates, but they happen once every six months or several years, and then everything is updated at once. That does mean that you don't get the latest version right away, but also that things just work and don't suddenly break. (Cathedral!)\n\nAnother way to fix the multiple options of X problem is to use environments. An environment is a separate part of the computer into which packages can be installed, in such a way that only packages within the environment are combined. So now you can install one application in one environment with one version of X, and the other application in another environment with another version of X. That costs more disk space, but it's easier to get the latest stuff, and it doesn't require all the work of constantly ensuring everything is compatible. So this makes option 2) look a bit more like option 1) again, although you can still have fewer environments than you have applications. (Bazaar!)\n\n## Which option to choose when\n\nScientific software is often a script, which is basically the topmost component in the whole collection of components. Scripts mostly just tell other components what to do. Since the script isn't used by other components, it can be packaged as an application in either of the above-mentioned ways. Users can the install and run it to *reproduce* the results, but not easily use it in their own script or modify it to do something different but related.\n\nSometimes, scientists (or Research Software Engineers!) develop components that are intended for use by others in their scripts, or even in other components. Those need to be packaged as packages for a package manager, because they need to be combined with other packages on the user's computer. (The user is a programmer, in this case!) This allows the software to be *reused* by others in their scripts.\n\nFinally, for others to be able to modify the software and perhaps contribute some new feature or fixes back to it, the source code of the software needs to be available through a public repository. Package managers and installers don't normally install software in a way that makes it easy to modify, as that's not what they're designed for. To be able to modify the software, you need the source code, in a version control system. So besides in a package or container repository, don't forget to make a public git repository too!",[152,189,300,594],{"_path":153,"_dir":154,"_draft":6,"_partial":6,"_locale":7,"title":155,"description":7,"order":156,"body":157,"_type":144,"_id":185,"_source":146,"_file":186,"_stem":187,"_extension":149,"plainText":188},"/main/about","main","About",1,{"type":13,"children":158,"toc":181},[159,165,170,176],{"type":16,"tag":35,"props":160,"children":162},{"id":161},"about-the-research-software-support",[163],{"type":22,"value":164},"About the Research Software Support",{"type":16,"tag":25,"props":166,"children":167},{},[168],{"type":22,"value":169},"In the Research Software Support modules we want to provide a comprehensive overview of the different aspects of research software support.",{"type":16,"tag":35,"props":171,"children":173},{"id":172},"target-audience",[174],{"type":22,"value":175},"Target audience",{"type":16,"tag":25,"props":177,"children":178},{},[179],{"type":22,"value":180},"The target audience for this material is University management and support staff.\nUniversity management taking part in courses involving these modules may be involved in creating university policy around research software.\nThe University support staff targeted are not themselves researchers or software engineers, but they support researchers and research software engineers in creating research software.",{"title":7,"searchDepth":139,"depth":139,"links":182},[183,184],{"id":161,"depth":139,"text":164},{"id":172,"depth":139,"text":175},"local_fs:main:about.md","main/about.md","main/about","---\ntitle: About\norder: 1\n---\n\n## About the Research Software Support\nIn the Research Software Support modules we want to provide a comprehensive overview of the different aspects of research software support.\n\n## Target audience\n\nThe target audience for this material is University management and support staff.\nUniversity management taking part in courses involving these modules may be involved in creating university policy around research software.\nThe University support staff targeted are not themselves researchers or software engineers, but they support researchers and research software engineers in creating research software.",{"_path":190,"_dir":154,"_draft":6,"_partial":6,"_locale":7,"title":191,"description":7,"order":11,"body":192,"_type":144,"_id":296,"_source":146,"_file":297,"_stem":298,"_extension":149,"plainText":299},"/main/contribute","Contribute",{"type":13,"children":193,"toc":290},[194,200,205,212,217],{"type":16,"tag":35,"props":195,"children":197},{"id":196},"contributing-to-the-research-software-support",[198],{"type":22,"value":199},"Contributing to the Research Software Support",{"type":16,"tag":25,"props":201,"children":202},{},[203],{"type":22,"value":204},"In the Research Software Support modules we want to provide a comprehensive overview of the different aspects of research software support.\nThis, as you can imagine, is no easy feat, and we need your help!\nSo first of all, thank you very much for your interest in contributing to this project.",{"type":16,"tag":206,"props":207,"children":209},"h3",{"id":208},"what-can-i-do",[210],{"type":22,"value":211},"What can I do?",{"type":16,"tag":25,"props":213,"children":214},{},[215],{"type":22,"value":216},"Go to our github repository by clicking on the GitHub logo in the top right of this website.",{"type":16,"tag":218,"props":219,"children":220},"ul",{},[221,238,261,273],{"type":16,"tag":222,"props":223,"children":224},"li",{},[225,227,236],{"type":22,"value":226},"Contribute to the content discussion in the ",{"type":16,"tag":228,"props":229,"children":233},"a",{"href":230,"rel":231},"https://github.com/esciencecenter-digital-skills/research-software-support/labels/module%20discussion",[232],"nofollow",[234],{"type":22,"value":235},"module issues",{"type":22,"value":237},", e.g. by listing good resources for information.",{"type":16,"tag":222,"props":239,"children":240},{},[241,243,250,252,259],{"type":22,"value":242},"Review a lesson module; both by looking at ",{"type":16,"tag":228,"props":244,"children":247},{"href":245,"rel":246},"https://github.com/esciencecenter-digital-skills/research-software-support/pulls",[232],[248],{"type":22,"value":249},"open PRs",{"type":22,"value":251},", as well as flagging issues for improvement in the ",{"type":16,"tag":228,"props":253,"children":256},{"href":254,"rel":255},"https://esciencecenter-digital-skills.github.io/research-software-support/",[232],[257],{"type":22,"value":258},"existing content",{"type":22,"value":260},".",{"type":16,"tag":222,"props":262,"children":263},{},[264,271],{"type":16,"tag":228,"props":265,"children":268},{"href":266,"rel":267},"https://github.com/esciencecenter-digital-skills/research-software-support/issues",[232],[269],{"type":22,"value":270},"Provide feedback",{"type":22,"value":272}," on the different subjects covered: what did we miss? Should something be restructured?",{"type":16,"tag":222,"props":274,"children":275},{},[276,282,284],{"type":16,"tag":277,"props":278,"children":279},"span",{},[280],{"type":22,"value":281},"Suggest a new entry",{"type":22,"value":283}," for the ",{"type":16,"tag":228,"props":285,"children":287},{"href":286},"/main/yellowpages",[288],{"type":22,"value":289},"Research Software Support Yellow Pages",{"title":7,"searchDepth":139,"depth":139,"links":291},[292],{"id":196,"depth":139,"text":199,"children":293},[294],{"id":208,"depth":295,"text":211},3,"local_fs:main:contribute.md","main/contribute.md","main/contribute","---\ntitle: Contribute\norder: 4\n---\n\n## Contributing to the Research Software Support\n\nIn the Research Software Support modules we want to provide a comprehensive overview of the different aspects of research software support.\nThis, as you can imagine, is no easy feat, and we need your help!\nSo first of all, thank you very much for your interest in contributing to this project.\n\n### What can I do?\n\nGo to our github repository by clicking on the GitHub logo in the top right of this website. \n\n* Contribute to the content discussion in the [module issues](https://github.com/esciencecenter-digital-skills/research-software-support/labels/module%20discussion), e.g. by listing good resources for information.\n* Review a lesson module; both by looking at [open PRs](https://github.com/esciencecenter-digital-skills/research-software-support/pulls), as well as flagging issues for improvement in the [existing content](https://esciencecenter-digital-skills.github.io/research-software-support/).\n* [Provide feedback](https://github.com/esciencecenter-digital-skills/research-software-support/issues) on the different subjects covered: what did we miss? Should something be restructured?\n* [Suggest a new entry] for the [Research Software Support Yellow Pages](/main/yellowpages)",{"_path":301,"_dir":154,"_draft":6,"_partial":6,"_locale":7,"title":302,"description":7,"order":11,"body":303,"_type":144,"_id":590,"_source":146,"_file":591,"_stem":592,"_extension":149,"plainText":593},"/main/workshops","Workshops",{"type":13,"children":304,"toc":581},[305,310,332,338,465,471,476,482,512,518,554,560],{"type":16,"tag":35,"props":306,"children":308},{"id":307},"about",[309],{"type":22,"value":155},{"type":16,"tag":25,"props":311,"children":312},{},[313,315,322,324,330],{"type":22,"value":314},"The Research Software Support can be taught as a live workshop. If you are interested in following or even hosting such a workshop, have a look at the ",{"type":16,"tag":228,"props":316,"children":319},{"href":317,"rel":318},"https://www.esciencecenter.nl/digital-skills/",[232],[320],{"type":22,"value":321},"training page",{"type":22,"value":323}," or contact the ",{"type":16,"tag":228,"props":325,"children":327},{"href":326},"mailto:training@esciencecenter.nl",[328],{"type":22,"value":329},"training team",{"type":22,"value":331}," at the Netherlands eScience Center.",{"type":16,"tag":35,"props":333,"children":335},{"id":334},"past-workshops",[336],{"type":22,"value":337},"Past workshops",{"type":16,"tag":339,"props":340,"children":341},"table",{},[342,373],{"type":16,"tag":343,"props":344,"children":345},"thead",{},[346],{"type":16,"tag":347,"props":348,"children":349},"tr",{},[350,357,363,368],{"type":16,"tag":351,"props":352,"children":354},"th",{"align":353},"right",[355],{"type":22,"value":356},"Date",{"type":16,"tag":351,"props":358,"children":360},{"align":359},"left",[361],{"type":22,"value":362},"Organisation",{"type":16,"tag":351,"props":364,"children":365},{"align":359},[366],{"type":22,"value":367},"Location",{"type":16,"tag":351,"props":369,"children":370},{"align":359},[371],{"type":22,"value":372},"Comments",{"type":16,"tag":374,"props":375,"children":376},"tbody",{},[377,401,422,444],{"type":16,"tag":347,"props":378,"children":379},{},[380,386,391,396],{"type":16,"tag":381,"props":382,"children":383},"td",{"align":353},[384],{"type":22,"value":385},"2023-11-28",{"type":16,"tag":381,"props":387,"children":388},{"align":359},[389],{"type":22,"value":390},"Netherlands eScience Center",{"type":16,"tag":381,"props":392,"children":393},{"align":359},[394],{"type":22,"value":395},"Amsterdam, The Netherlands",{"type":16,"tag":381,"props":397,"children":398},{"align":359},[399],{"type":22,"value":400},"Pilot workshop, VU",{"type":16,"tag":347,"props":402,"children":403},{},[404,409,413,417],{"type":16,"tag":381,"props":405,"children":406},{"align":353},[407],{"type":22,"value":408},"2024-05-16",{"type":16,"tag":381,"props":410,"children":411},{"align":359},[412],{"type":22,"value":390},{"type":16,"tag":381,"props":414,"children":415},{"align":359},[416],{"type":22,"value":395},{"type":16,"tag":381,"props":418,"children":419},{"align":359},[420],{"type":22,"value":421},"Pilot workshop, UvA/HvA",{"type":16,"tag":347,"props":423,"children":424},{},[425,430,434,439],{"type":16,"tag":381,"props":426,"children":427},{"align":353},[428],{"type":22,"value":429},"2024-09-10",{"type":16,"tag":381,"props":431,"children":432},{"align":359},[433],{"type":22,"value":390},{"type":16,"tag":381,"props":435,"children":436},{"align":359},[437],{"type":22,"value":438},"Utrecht & Amsterdam, The Netherlands",{"type":16,"tag":381,"props":440,"children":441},{"align":359},[442],{"type":22,"value":443},"Split-day workshop",{"type":16,"tag":347,"props":445,"children":446},{},[447,452,456,460],{"type":16,"tag":381,"props":448,"children":449},{"align":353},[450],{"type":22,"value":451},"2025-02-03",{"type":16,"tag":381,"props":453,"children":454},{"align":359},[455],{"type":22,"value":390},{"type":16,"tag":381,"props":457,"children":458},{"align":359},[459],{"type":22,"value":395},{"type":16,"tag":381,"props":461,"children":462},{"align":359},[463],{"type":22,"value":464},"Split-day workshop, DCC-PO",{"type":16,"tag":35,"props":466,"children":468},{"id":467},"homework",[469],{"type":22,"value":470},"Homework",{"type":16,"tag":25,"props":472,"children":473},{},[474],{"type":22,"value":475},"These are potential homework exercises that can be used in a live workshop setting.",{"type":16,"tag":206,"props":477,"children":479},{"id":478},"research-software",[480],{"type":22,"value":481},"Research Software",{"type":16,"tag":483,"props":484,"children":485},"ol",{},[486,499],{"type":16,"tag":222,"props":487,"children":488},{},[489,491,498],{"type":22,"value":490},"Find a piece of research software that you like (because of the topic or nice picture, or whetever other reason) from the ",{"type":16,"tag":228,"props":492,"children":495},{"href":493,"rel":494},"https://research-software-directory.org/software?page=1&rows=48",[232],[496],{"type":22,"value":497},"Research Software Directory",{"type":22,"value":260},{"type":16,"tag":222,"props":500,"children":501},{},[502,504,510],{"type":22,"value":503},"Do the ",{"type":16,"tag":228,"props":505,"children":507},{"href":506},"/modules/researchsoftware/exercise-research-life-cycle",[508],{"type":22,"value":509},"exercise about the research life cycle",{"type":22,"value":511}," from the Research Software module, use the piece of software you chose.",{"type":16,"tag":206,"props":513,"children":515},{"id":514},"software-in-the-research-landscape",[516],{"type":22,"value":517},"Software in the Research landscape",{"type":16,"tag":483,"props":519,"children":520},{},[521,549],{"type":16,"tag":222,"props":522,"children":523},{},[524,526,532,534,539,541,547],{"type":22,"value":525},"From all the different initiatives, concepts and organizations discussed in the ",{"type":16,"tag":228,"props":527,"children":529},{"href":528},"/modules/softwarelandscape/slides",[530],{"type":22,"value":531},"Software Landscape module",{"type":22,"value":533}," or the ",{"type":16,"tag":228,"props":535,"children":536},{"href":286},[537],{"type":22,"value":538},"Yellow Pages",{"type":22,"value":540},", pick ",{"type":16,"tag":542,"props":543,"children":544},"strong",{},[545],{"type":22,"value":546},"three",{"type":22,"value":548}," that your chosen piece of software could/should connect to and/or use.",{"type":16,"tag":222,"props":550,"children":551},{},[552],{"type":22,"value":553},"Explain why you chose these three and what makes them valuable for the chosen piece of software.",{"type":16,"tag":206,"props":555,"children":557},{"id":556},"software-management-plan",[558],{"type":22,"value":559},"Software Management Plan",{"type":16,"tag":483,"props":561,"children":562},{},[563,576],{"type":16,"tag":222,"props":564,"children":565},{},[566,568,574],{"type":22,"value":567},"Create a software management plan template which fits your piece of software by using step 2 and 3 from the ",{"type":16,"tag":228,"props":569,"children":571},{"href":570},"/modules/softwaremanagementplans/templatebuilding",[572],{"type":22,"value":573},"Template Building exercise",{"type":22,"value":575}," in the software management plan module.",{"type":16,"tag":222,"props":577,"children":578},{},[579],{"type":22,"value":580},"Fill out your own software management plan template. Keep it short and to the point.",{"title":7,"searchDepth":139,"depth":139,"links":582},[583,584,585],{"id":307,"depth":139,"text":155},{"id":334,"depth":139,"text":337},{"id":467,"depth":139,"text":470,"children":586},[587,588,589],{"id":478,"depth":295,"text":481},{"id":514,"depth":295,"text":517},{"id":556,"depth":295,"text":559},"local_fs:main:workshops.md","main/workshops.md","main/workshops","---\ntitle: Workshops\norder: 4\n---\n\n## About\nThe Research Software Support can be taught as a live workshop. If you are interested in following or even hosting such a workshop, have a look at the [training page](https://www.esciencecenter.nl/digital-skills/) or contact the [training team](mailto:training@esciencecenter.nl) at the Netherlands eScience Center.\n\n\n## Past workshops\n\n| Date               | Organisation                 | Location                              | Comments                    |\n|-------------------:|:-----------------------------|:--------------------------------------|:----------------------------|\n| 2023-11-28         | Netherlands eScience Center  | Amsterdam, The Netherlands            | Pilot workshop, VU          |\n| 2024-05-16         | Netherlands eScience Center  | Amsterdam, The Netherlands            | Pilot workshop, UvA/HvA     |\n| 2024-09-10         | Netherlands eScience Center  | Utrecht & Amsterdam, The Netherlands  | Split-day workshop          |\n| 2025-02-03         | Netherlands eScience Center  | Amsterdam, The Netherlands            | Split-day workshop, DCC-PO  |\n\n\n## Homework\n\nThese are potential homework exercises that can be used in a live workshop setting.\n\n### Research Software\n\n1. Find a piece of research software that you like (because of the topic or nice picture, or whetever other reason) from the [Research Software Directory](https://research-software-directory.org/software?page=1&rows=48).\n\n1. Do the [exercise about the research life cycle](/modules/researchsoftware/exercise-research-life-cycle) from the Research Software module, use the piece of software you chose.\n\n### Software in the Research landscape\n\n1. From all the different initiatives, concepts and organizations discussed in the [Software Landscape module](/modules/softwarelandscape/slides) or the [Yellow Pages](/main/yellowpages), pick **three** that your chosen piece of software could/should connect to and/or use. \n\n2. Explain why you chose these three and what makes them valuable for the chosen piece of software. \n\n\n### Software Management Plan\n\n1. Create a software management plan template which fits your piece of software by using step 2 and 3 from the [Template Building exercise](/modules/softwaremanagementplans/templatebuilding) in the software management plan module.\n\n2. Fill out your own software management plan template. Keep it short and to the point. \n",{"_path":286,"_dir":154,"_draft":6,"_partial":6,"_locale":7,"title":538,"description":595,"order":295,"body":596,"_type":144,"_id":852,"_source":146,"_file":853,"_stem":854,"_extension":149,"plainText":855},"These yellow pages are work in progress and will keep expanding. They are meant to help you find the right person/organisation for each problem/topic you have to deal with regarding Research Software Support. Feel free to suggest an addition by following the contributing guidelines.",{"type":13,"children":597,"toc":844},[598,603,617,623,646,652,675,681,724,730,773,779,805,811],{"type":16,"tag":17,"props":599,"children":601},{"id":600},"research-software-support-yellow-pages",[602],{"type":22,"value":289},{"type":16,"tag":25,"props":604,"children":605},{},[606],{"type":16,"tag":114,"props":607,"children":608},{},[609,611,616],{"type":22,"value":610},"These yellow pages are work in progress and will keep expanding. They are meant to help you find the right person/organisation for each problem/topic you have to deal with regarding Research Software Support. Feel free to suggest an addition by following the ",{"type":16,"tag":228,"props":612,"children":613},{"href":190},[614],{"type":22,"value":615},"contributing guidelines",{"type":22,"value":260},{"type":16,"tag":35,"props":618,"children":620},{"id":619},"research-software-engineers-communities-and-networks",[621],{"type":22,"value":622},"Research Software Engineers communities and networks",{"type":16,"tag":218,"props":624,"children":625},{},[626,636],{"type":16,"tag":222,"props":627,"children":628},{},[629],{"type":16,"tag":228,"props":630,"children":633},{"href":631,"rel":632},"https://nl-rse.org/",[232],[634],{"type":22,"value":635},"NL RSE",{"type":16,"tag":222,"props":637,"children":638},{},[639],{"type":16,"tag":228,"props":640,"children":643},{"href":641,"rel":642},"https://society-rse.org/",[232],[644],{"type":22,"value":645},"Society of Research Software Engineering",{"type":16,"tag":35,"props":647,"children":649},{"id":648},"open-science",[650],{"type":22,"value":651},"Open Science",{"type":16,"tag":218,"props":653,"children":654},{},[655,665],{"type":16,"tag":222,"props":656,"children":657},{},[658],{"type":16,"tag":228,"props":659,"children":662},{"href":660,"rel":661},"https://www.openscience.nl/en",[232],[663],{"type":22,"value":664},"Open Science NL",{"type":16,"tag":222,"props":666,"children":667},{},[668],{"type":16,"tag":228,"props":669,"children":672},{"href":670,"rel":671},"https://freeopensourcesoftware.org/",[232],[673],{"type":22,"value":674},"FOSS (Free and Open Source Software)",{"type":16,"tag":35,"props":676,"children":678},{"id":677},"fair",[679],{"type":22,"value":680},"FAIR",{"type":16,"tag":218,"props":682,"children":683},{},[684,694,704,714],{"type":16,"tag":222,"props":685,"children":686},{},[687],{"type":16,"tag":228,"props":688,"children":691},{"href":689,"rel":690},"https://www.nature.com/articles/s41597-022-01710-x",[232],[692],{"type":22,"value":693},"FAIR for Research Software",{"type":16,"tag":222,"props":695,"children":696},{},[697],{"type":16,"tag":228,"props":698,"children":701},{"href":699,"rel":700},"https://www.researchsoft.org/",[232],[702],{"type":22,"value":703},"ReSA (Research Software Alliance)",{"type":16,"tag":222,"props":705,"children":706},{},[707],{"type":16,"tag":228,"props":708,"children":711},{"href":709,"rel":710},"https://www.rd-alliance.org/",[232],[712],{"type":22,"value":713},"RDA (Research Data Alliance)",{"type":16,"tag":222,"props":715,"children":716},{},[717],{"type":16,"tag":228,"props":718,"children":721},{"href":719,"rel":720},"https://force11.org/",[232],[722],{"type":22,"value":723},"FORCE11 (Future of Research Communications and e-Scholarship)",{"type":16,"tag":35,"props":725,"children":727},{"id":726},"research-software-traininglearning",[728],{"type":22,"value":729},"Research Software training/learning",{"type":16,"tag":218,"props":731,"children":732},{},[733,743,753,763],{"type":16,"tag":222,"props":734,"children":735},{},[736],{"type":16,"tag":228,"props":737,"children":740},{"href":738,"rel":739},"https://researchsoftwaretraining.nl",[232],[741],{"type":22,"value":742},"Research Software Training",{"type":16,"tag":222,"props":744,"children":745},{},[746],{"type":16,"tag":228,"props":747,"children":750},{"href":748,"rel":749},"https://carpentries.org/",[232],[751],{"type":22,"value":752},"Carpentries",{"type":16,"tag":222,"props":754,"children":755},{},[756],{"type":16,"tag":228,"props":757,"children":760},{"href":758,"rel":759},"https://coderefinery.org/",[232],[761],{"type":22,"value":762},"Code Refinery",{"type":16,"tag":222,"props":764,"children":765},{},[766],{"type":16,"tag":228,"props":767,"children":770},{"href":768,"rel":769},"https://book.the-turing-way.org/",[232],[771],{"type":22,"value":772},"The Turing Way",{"type":16,"tag":35,"props":774,"children":776},{"id":775},"technical-support",[777],{"type":22,"value":778},"Technical support",{"type":16,"tag":218,"props":780,"children":781},{},[782,793],{"type":16,"tag":222,"props":783,"children":784},{},[785,791],{"type":16,"tag":228,"props":786,"children":789},{"href":787,"rel":788},"https://esciencecenter.nl/",[232],[790],{"type":22,"value":390},{"type":22,"value":792}," (Research Software / Training)",{"type":16,"tag":222,"props":794,"children":795},{},[796,803],{"type":16,"tag":228,"props":797,"children":800},{"href":798,"rel":799},"https://surf.nl/",[232],[801],{"type":22,"value":802},"SURF",{"type":22,"value":804}," (Academic ICT services / High Performance Computing / Data Storage)",{"type":16,"tag":35,"props":806,"children":808},{"id":807},"other",[809],{"type":22,"value":810},"Other",{"type":16,"tag":218,"props":812,"children":813},{},[814,824,834],{"type":16,"tag":222,"props":815,"children":816},{},[817],{"type":16,"tag":228,"props":818,"children":821},{"href":819,"rel":820},"https://zenodo.org/records/7248877",[232],[822],{"type":22,"value":823},"Practical Guide to Software Management Plans",{"type":16,"tag":222,"props":825,"children":826},{},[827],{"type":16,"tag":228,"props":828,"children":831},{"href":829,"rel":830},"https://www.softwareheritage.org/",[232],[832],{"type":22,"value":833},"Software Heritage",{"type":16,"tag":222,"props":835,"children":836},{},[837],{"type":16,"tag":228,"props":838,"children":841},{"href":839,"rel":840},"https://www.software.ac.uk/",[232],[842],{"type":22,"value":843},"Software Sustainability Institute",{"title":7,"searchDepth":139,"depth":139,"links":845},[846,847,848,849,850,851],{"id":619,"depth":139,"text":622},{"id":648,"depth":139,"text":651},{"id":677,"depth":139,"text":680},{"id":726,"depth":139,"text":729},{"id":775,"depth":139,"text":778},{"id":807,"depth":139,"text":810},"local_fs:main:yellowpages.md","main/yellowpages.md","main/yellowpages","---\ntitle: Yellow Pages\norder: 3\n---\n\n# Research Software Support Yellow Pages\n*These yellow pages are work in progress and will keep expanding. They are meant to help you find the right person/organisation for each problem/topic you have to deal with regarding Research Software Support. Feel free to suggest an addition by following the [contributing guidelines](/main/contribute).*\n\n## Research Software Engineers communities and networks\n- [NL RSE](https://nl-rse.org/)\n- [Society of Research Software Engineering](https://society-rse.org/)\n\n## Open Science\n- [Open Science NL](https://www.openscience.nl/en)\n- [FOSS (Free and Open Source Software)](https://freeopensourcesoftware.org/)\n\n## FAIR\n- [FAIR for Research Software](https://www.nature.com/articles/s41597-022-01710-x) \n- [ReSA (Research Software Alliance)](https://www.researchsoft.org/)\n- [RDA (Research Data Alliance)](https://www.rd-alliance.org/)\n- [FORCE11 (Future of Research Communications and e-Scholarship)](https://force11.org/)\n\n## Research Software training/learning\n- [Research Software Training](https://researchsoftwaretraining.nl)\n- [Carpentries](https://carpentries.org/) \n- [Code Refinery](https://coderefinery.org/)\n- [The Turing Way](https://book.the-turing-way.org/)\n\n## Technical support\n- [Netherlands eScience Center](https://esciencecenter.nl/) (Research Software / Training)\n- [SURF](https://surf.nl/) (Academic ICT services / High Performance Computing / Data Storage)\n\n## Other\n- [Practical Guide to Software Management Plans](https://zenodo.org/records/7248877)\n- [Software Heritage](https://www.softwareheritage.org/)\n- [Software Sustainability Institute](https://www.software.ac.uk/)\n",1738524870880]