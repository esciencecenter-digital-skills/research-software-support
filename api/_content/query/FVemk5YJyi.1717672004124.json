[{"_path":"/modules/testing/ci-cd","_dir":"testing","_draft":false,"_partial":false,"_locale":"","title":"Continuous Integration","description":"","type":"reading","order":3,"_type":"markdown","_id":"local_fs:modules:testing:ci-cd.md","_source":"local_fs","_file":"modules/testing/ci-cd.md","_extension":"md","plainText":"---\ntitle: Continuous Integration\ntype: reading\norder: 3\n---\n\n## Continuous Integration (CI) (2 minutes)\nContinuous Integration (CI) is a practice in software development where team members regularly integrate their individual code changes into a shared remote repository, often several times a day. After each integration, a working version of the project is built, and the software's test suite is run automatically. This process allows for the early identification of defects, errors, flaws, or bugs introduced by changes, helping to maintain code quality and reduce the chances of major issues when combining everyone's work.\n\n### Importance of CI\nCI offers several key benefits:\n\n- **Early Bug Detection**: By identifying bugs early, CI minimizes their impact and makes them easier to fix.\n- **Synchronization**: Keeps project contributors up to date with each other’s work, allowing them to benefit from new features as soon as possible.\n- **Encouragement to Write Tests**: Promotes the practice of writing tests, ensuring better code quality.\n- **Test Automation**: Automates the process of running tests, saving time and effort.\n- **Frequent Testing**: Ensures that tests are run frequently, maintaining continuous validation of the software's functionality.\n\n## Continuous Deployment (CD) (1 minute)\nContinuous Deployment (CD) is an extension of the CI practice that automates the release of software updates to users. This is done for every change that passes all stages of the development pipeline, including automated tests. CD ensures that the software is always in a releasable state and that new features, improvements, and bug fixes are delivered to users quickly and consistently.\n\nTogether, CI and CD form a powerful combination that enhances the efficiency, reliability, and speed of the software development process."},{"_path":"/modules/testing/exercise2","_dir":"testing","_draft":false,"_partial":false,"_locale":"","title":"Exercise 2","description":"","type":"exercise","order":5,"_type":"markdown","_id":"local_fs:modules:testing:exercise2.md","_source":"local_fs","_file":"modules/testing/exercise2.md","_extension":"md","plainText":"---\ntitle: Exercise 2\ntype: exercise\norder: 5\n---\n\n# Exercise 2\n\n## Instructions\n\n- Match the items in Column A with their corresponding items in Column B.\n- Write the letter of the correct match next to each item in Column A.\n- Have fun and learn!\n\n---\n\n## Exercise\n\n| Column A: Test Type  | Match | Column B: Description |\n|----------------------|-------|-----------------------|\n| 1. Smoke Test        |       | A. Style of testing that focuses on retesting after changes are made. The results of tests after the changes are compared to the results before, and errors are raised if these are different. The purpose of this test is to ensure that changes (enhancements or defect fixes) to the software have not adversely affected it. |\n| 2. Unit Test         |       | B. A level of the software testing process where the complete, integrated system is tested. The purpose of this test is to evaluate whether the system as a whole gives the correct outputs for given inputs. |\n| 3. Integration Test  |       | C. Very brief initial checks that ensure the basic units required to run the software can be initialized. If these fail there is no point proceeding to additional levels of testing until they are fixed. |\n| 4. System Test       |       | D. A level of software testing where individual units are combined and tested as a group. The purpose of this level of testing is to expose faults in the interaction between integrated units. |\n| 5. Regression Test   |       | E. A level of the software testing process where individual units of a software are tested. The purpose is to ensure that each unit of the software works as expected. | \n\n---\n\n## Hint\n\nHere’s an analogy: during the process of manufacturing a ballpoint pen, the cap, the body, the tail, the ink cartridge and the ballpoint are produced separately and unit tested separately. When two or more units are ready, they are assembled and integration testing is performed, for example a test to check the cap fits on the body. When the complete pen is integrated, system testing is performed to check it can be used to write like any pen should.\n\n<small> correct answers: 1.C., 2.E., 3.D., 4.B., and 5.A </small>\n\n"}]