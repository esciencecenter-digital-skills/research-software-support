[{"_path":"/modules/citation/principles","_dir":"citation","_draft":false,"_partial":false,"_locale":"","title":"The principles","description":"","type":"reading","order":3,"_type":"markdown","_id":"local_fs:modules:citation:principles.md","_source":"local_fs","_file":"modules/citation/principles.md","_extension":"md","plainText":"---\ntitle: The principles\ntype: reading\norder: 3\n---\n\n### The software citation principles\nThe FORCE11 working group published the [Software Citation Principles](https://force11.org/info/software-citation-principles-published-2016/)\n\n**Importance**: Software should be considered a legitimate and citable product of research. Software citations should be accorded the same importance in the scholarly record as citations of other research products, such as publications and data; they should be included in the metadata of the citing work, for example in the reference list of a journal article, and should not be omitted or separated. Software should be cited on the same basis as any other research product such as a paper or a book, that is, authors should cite the appropriate set of software products just as they cite the appropriate set of papers.\n\n**Credit and Attribution**: Software citations should facilitate giving scholarly credit and normative, legal attribution to all contributors to the software, recognizing that a single style or mechanism of attribution may not be applicable to all software.\n\n**Unique Identification**: A software citation should include a method for identification that is machine actionable, globally unique, interoperable, and recognized by at least a community of the corresponding domain experts, and preferably by general public researchers.\n\n**Persistence**: Unique identifiers and metadata describing the software and its disposition should persist â€“ even beyond the lifespan of the software they describe.\n\n**Accessibility**: Software citations should facilitate access to the software itself and to its associated metadata, documentation, data, and other materials necessary for both humans and machines to make informed use of the referenced software.\n\n**Specificity**: Software citations should facilitate identification of, and access to, the specific version of software that was used. Software identification should be as specific as necessary, such as using version numbers, revision numbers, or variants such as platforms.\n"},{"_path":"/modules/fairsoftware/exercise1","_dir":"fairsoftware","_draft":false,"_partial":false,"_locale":"","title":"What is FAIR?","description":"","type":"exercise","order":2,"_type":"markdown","_id":"local_fs:modules:fairsoftware:exercise1.md","_source":"local_fs","_file":"modules/fairsoftware/exercise1.md","_extension":"md","plainText":"---\ntitle: What is FAIR?\ntype: exercise\norder: 2\n---\n\n## Exercise: What is FAIR?\n\n### FAIR principles (15 minutes)\n\nThe FAIR principles are:\n\n- **F**indable\n- **A**ccessible\n- **I**nteroperable\n- **R**eusable\n\nThey were originally introduced in [this paper by Wilkinson et al.](https://doi.org/10.1038/sdata.2016.18).\nThis paper is a good starting point to learn more about FAIR, but if you are already familiar with the concept, a quick skim of the paper should do.\nThe most important take-away from this particular paper is the point that FAIR, while originally a data-specific concept, was designed with other digital objects in mind as well.\n\n### FAIR software (10 minutes)\n\nTo extend the FAIR principles to software, the [FAIR 4 Research Software working group](https://force11.org/groups/fair-4-research-software-fair4rs-working-group/) was formed.\nTheir paper [Introducing the FAIR principles for research software](https://doi.org/10.1038/s41597-022-01710-x) describes in more practical terms how FAIR can be applied to software.\n\n#### You should now be able to\n\n- Understand the different facets of FAIR\n- Be aware of the machine-actionable nature of FAIR\n- Get a feeling for additional challenges that software poses to FAIR\n\n### FAIR software (20 minutes, optional)\n\nWhile the intepretation of the FAIR4RS working group has been the dominant set of principles since its publication, it was not the first attempt to apply FAIR to software.\n[This paper by Anna Lena Lamprecht et al.](https://doi.org/10.3233/ds-190026) was published a few years earlier, and also described an extension of the FAIR principles for software.\nThe paper is a more elaborate in its descriptions of software, the different aspects of software, and how they are or are not addressed by FAIR.\nIt is a good read if you want to get a deeper understanding of software and its relation to the FAIR principles.\n\n### Discussion\n\n- What are the differences between FAIR principles for data and software?\n- What challenges do you see in making software FAIR?\n- Why is FAIR software important?"}]