[{"_path":"/modules/version-control/info","_dir":"version-control","_draft":false,"_partial":false,"_locale":"","title":"Learning objectives","description":"In this module you will learn to answer the following questions:","type":"info","order":0,"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this module you will learn to answer the following questions:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Explain what version control of research software is"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Illustrate the importance of using version control"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Identify when in the research cycle to employ version control"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Compare the use of local and remote version control"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"List the various tools or systems for version control"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Identify relevant resources for researchers about features commonly used in version control"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"local_fs:modules:version-control:info.md","_source":"local_fs","_file":"modules/version-control/info.md","_stem":"modules/version-control/info","_extension":"md","plainText":"---\ntitle: Learning objectives\ntype: info\norder: 0\n---\n\nIn this module you will learn to answer the following questions:\n\n- Explain what version control of research software is\n- Illustrate the importance of using version control\n- Identify when in the research cycle to employ version control\n- Compare the use of local and remote version control\n- List the various tools or systems for version control\n- Identify relevant resources for researchers about features commonly used in version control\n"},{"_path":"/modules/version-control/slides-version-control","_dir":"version-control","_draft":false,"_partial":false,"_locale":"","title":"Version Control Slides","description":"What is version control and why should I use it?","type":"slides","order":1,"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"version-control"},"children":[{"type":"text","value":"Version Control"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"What is version control and why should I use it?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nYou are probably using version control every day. Word and other documents store a history of changes for you, which you can undo. Google docs have an even more intricate system of reviewing history, etc."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h3","props":{"id":"version-control-1"},"children":[{"type":"text","value":"Version Control"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"A system that organizes and records changes to a (set of) file(s) and/or their metadata over time, allowing one to\nrevisit specific versions later."}]}]},{"type":"element","tag":"div","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"src":"https://swcarpentry.github.io/git-novice/fig/phd101212s.png","width":"38%"},"children":[]},{"type":"text","value":"\n  "},{"type":"element","tag":"small","props":{},"children":[{"type":"text","value":" "},{"type":"element","tag":"a","props":{"href":"http://www.phdcomics.com"},"children":[{"type":"text","value":"Piled Higher and Deeper"}]},{"type":"text","value":" by Jorge Cham "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nStrictly speaking, this is a form of version control: separate versions are stored, commented on, and organized in some way."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lets see a more practical, systematic, and robust way of doing this..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"documents-are"},"children":[{"type":"text","value":"Documents are..."}]},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n  ... a series of changes\n  "},{"type":"element","tag":"img","props":{"style":"height: 30vh; margin: 0; padding: 0;","src":"https://swcarpentry.github.io/git-novice/fig/play-changes.svg"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nIn version control systems, documents start with a base version (which may or may not be empty) and record all the changes that happened on top of that base version. Because of this you can always \"play back\" to an earlier version or compare separate iterations, without having to store near-identical variations of the same documents."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"=="}]},{"type":"element","tag":"h2","props":{"id":"software-is"},"children":[{"type":"text","value":"Software is..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"... a collection of one or more documents."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Code"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Documentation"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Environment & infrastructural files"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"..."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nAny piece of code is nothing more than a (plain) text document, not too different from a word file. The same is generally true for most other files comprising the software. Therefore, changes are excessively easy and computationally efficient to track."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Even complex (binary, data, image, ...) files can ultimately be rendered in plain text, and therefore tracked using version control. Although changes are not easy to visualize and it will require multiplying the data storage for each change."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"changes"},"children":[{"type":"text","value":"Changes..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"... are stored using a version control (VC) system (usually "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"git"}]},{"type":"text","value":")."}]},{"type":"element","tag":"img","props":{"src":"/modules/version-control/media/git-diff.png","width":"70%"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A single unit of change is called a "},{"type":"element","tag":"a","props":{"href":"version_control_terminology"},"children":[{"type":"text","value":"commit"}]},{"type":"text","value":", and is typically associated with a brief "},{"type":"element","tag":"a","props":{"href":"version_control_terminology"},"children":[{"type":"text","value":"commit message"}]},{"type":"text","value":", "},{"type":"element","tag":"a","props":{"href":"version_control_terminology"},"children":[{"type":"text","value":"commit hash"}]},{"type":"text","value":" (SHA), and other metadata."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nCommit hashes are unique references to a commit, while commit messages are human readable descriptions. Other metadata can include the author(s), timestamp, etc."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"=="}]},{"type":"element","tag":"h2","props":{"id":"a-commit"},"children":[{"type":"text","value":"A commit..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"... can be of any size or type:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Single line additions/deletions/changes"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Additions/deletions/changes of (multiple) large sections"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Adding or deleting files"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Moving files into different folders"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"..."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nA commit is the fundamental unit of change in version control, but its scope is not strictly defined."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Ideally, a commit should be large enough to represent a meaningful improvement while remaining small enough to focus on a single, coherent change. Balancing these factors helps maintain clarity and makes it easier to track, review, and revert changes when needed."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"=="}]},{"type":"element","tag":"h2","props":{"id":"sequential-commits"},"children":[{"type":"text","value":"Sequential commits..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"... form a log"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The data structure that contains the software plus the commit history is called a "},{"type":"element","tag":"a","props":{"href":"version_control_terminology"},"children":[{"type":"text","value":"repository"}]},{"type":"text","value":"."}]},{"type":"element","tag":"img","props":{"src":"/modules/version-control/media/git-log.png","width":"70%"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nA good rule of thumb for commit sizing is whether you can write a clear, concise commit message summarizing the change. If the commit is too small, the message will simply describe the specific action taken. If it's too large, summarizing it succinctly becomes difficult. Striking the right balance ultimately also allows the commit log to be read almost like a history book."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"keeping-track"},"children":[{"type":"text","value":"Keeping track"}]},{"type":"element","tag":"h4","props":{"id":"question"},"children":[{"type":"text","value":"Question:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Say you have dozens (hundreds, thousands, ...) of old versions, how do you manage to find a specific/useful previous version?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Effective committing (sizing & messages)"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Versioning systems"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Create Change logs and DOIs for stable/important versions"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nWe've talked above extensively about commit hygeine, so will now discuss the other 2 aspects."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"=="}]},{"type":"element","tag":"h2","props":{"id":"versioning"},"children":[{"type":"text","value":"Versioning"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Use a logical system to keep track of (stable) versions\n... and document the system used in the repository."}]},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["fragment"],"dataFragmentIndex":"1","style":"text-align: center;"},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Common systems"}]},{"type":"text","value":":\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://semver.org/"},"children":[{"type":"text","value":"Semantic Versioning (SemVer)"}]},{"type":"text","value":":\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"4.3.12 = major.minor.patch"}]},{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"pro: version numbers have a functional relevance"}]},{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"con: users must keep track of the precise version used"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["fragment"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://calver.org/"},"children":[{"type":"text","value":"Calendar Versioning (CalVer)"}]},{"type":"text","value":":\n        "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"2025.02.03 = YYYY.MM.DD"}]},{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"pro: simpler implementation"}]},{"type":"text","value":"\n          "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"con: development is usually not as linear as this system implies"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nNot every change or addition needs a new version number; this is what commits are for."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Make sure that whatever versioning system you use is also documented in the repo, so that others (and future you) can see what the logic is."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"=="}]},{"type":"element","tag":"h2","props":{"id":"change-logs-dois"},"children":[{"type":"text","value":"Change logs & DOIs"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Keep a human readable log summarizing the changes of each new version."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Host versions on servers such as "},{"type":"element","tag":"a","props":{"href":"https://zenodo.org/","rel":["nofollow"]},"children":[{"type":"text","value":"Zenodo"}]},{"type":"text","value":" or "},{"type":"element","tag":"a","props":{"href":"https://github.com/","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub"}]},{"type":"text","value":"/"},{"type":"element","tag":"a","props":{"href":"https://gitlab.com/","rel":["nofollow"]},"children":[{"type":"text","value":"GitLab"}]},{"type":"text","value":" to generate a DOI."}]},{"type":"element","tag":"img","props":{"src":"/modules/version-control/media/ChangeLog.png","width":"45%"},"children":[]},{"type":"element","tag":"small","props":{},"children":[{"type":"text","value":"Excerpt of release notes for "},{"type":"element","tag":"a","props":{"href":"https://github.com/astral-sh/ruff/releases/tag/0.8.6"},"children":[{"type":"text","value":"ruff linter v0.8.6"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is the equivalent of the \"commit message\" at the level of a new version."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"There are a few (near) synonyms used for this: change log, release notes, change history, etc. However, it is separate from the commit log or commit history, as per the comment above."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"collaborating-using-vc"},"children":[{"type":"text","value":"Collaborating using VC"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"More than one..."}]},{"type":"element","tag":"div","props":{"style":"float: left; width: 49%;","className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"\n  ... source of change...\n  "},{"type":"element","tag":"img","props":{"style":"height: 80%; padding-top: 20px;","src":"/modules/version-control/media/versions.svg"},"children":[]}]},{"type":"element","tag":"div","props":{"style":"float: right; width: 49%;","className":["fragment"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"\n  ... can be merged.\n  "},{"type":"element","tag":"img","props":{"style":"height: 80%; padding-top: 20px;","src":"/modules/version-control/media/merge.svg"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nWhen collaborating you might have various versions (sets of changes) that co-exist at the same time on so called \"branches\". Modern version control software can usually automatically merge multiple changes into a single document."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"=="}]},{"type":"element","tag":"h2","props":{"id":"branching"},"children":[{"type":"text","value":"Branching"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A project can have many "},{"type":"element","tag":"a","props":{"href":"version_control_terminology"},"children":[{"type":"text","value":"branches"}]},{"type":"text","value":", which may or may not get "},{"type":"element","tag":"a","props":{"href":"version_control_terminology"},"children":[{"type":"text","value":"merged"}]},{"type":"text","value":" back into the main version."}]},{"type":"element","tag":"img","props":{"src":"https://book.the-turing-way.org/_images/sub-branch.png","width":"60%"},"children":[]},{"type":"element","tag":"small","props":{},"children":[{"type":"text","value":" Image by: "},{"type":"element","tag":"a","props":{"href":"https://book.the-turing-way.org/reproducible-research/vcs/vcs-workflow-branches"},"children":[{"type":"text","value":"The Turing Way"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"What uses can you think of to create branches, other than \"feature branches\"?"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nThe main branch is supposed to be a stable version, that one can mostly rely on to work as expected. Changes created in branches may get merged back into the stable version, or may persist (or die) as a parallel version\nBranches here are indicated as \"feature branches\", i.e. branches used while creating new features in a code base."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Other uses of branches:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"a sandbox or playground, for trying out different things without \"damaging\" the stable version"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"organizing/storing results alongside their different variations/settings"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"release management"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"custom/user specific changes"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"..."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"=="}]},{"type":"element","tag":"h2","props":{"id":"keeping-a-centralized-repository"},"children":[{"type":"text","value":"Keeping a centralized repository"}]},{"type":"element","tag":"img","props":{"style":"height: 350px;","src":"https://www.researchgate.net/profile/Mark-Ziemann/publication/371671830/figure/fig2/AS:11431281168661745@1687060872300/Distributed-version-control-Adapted-from-48.png","alt":"Distributed version control. Adapted from [48]."},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"small","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.researchgate.net/figure/Distributed-version-control-Adapted-from-48_fig2_371671830","rel":["nofollow"]},"children":[{"type":"text","value":"The five pillars of computational reproducibility: Bioinformatics and beyond"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nCollaborative code developers often make use of a remote server (like GitHub, or GitLab) as a central repository from which all other repositories derive. But this is not the only way you can use version control to do collaborative development."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Separate local repositories are similar to but distinct from individual branches of the main repository."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"=="}]},{"type":"element","tag":"h2","props":{"id":"hosting-the-main-repository"},"children":[{"type":"text","value":"Hosting the main repository"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"src":"/modules/version-control/media/repository_logos_focused.png","width":"80%"},"children":[]},{"type":"text","value":" "}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nMany different tools exist specifically for collaborative version control of computer source code and other simple text-based documents."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Git (for version control) with GitLab and GitHub (for collaboration) are the mainstream, used by many and with lots of features. We recommend against using any of the other tools unless the users already know what they are doing or have very strong reasons for dloing so."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GitLab is fully open source and offers a self-managed option, allowing organizations to host and manage their own GitLab instances on-premises or in their private cloud environments. This provides full control over data and customization."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Conversely, GitHub is owned by Microsoft and uses (some) proprietary software, but is more widely used and more people will be familiar with the interface and functionality. It offers no self-managed option, but does allow for private repositories."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-can-go-wrong"},"children":[{"type":"text","value":"What can go wrong?"}]},{"type":"element","tag":"img","props":{"src":"/modules/version-control/media/conflict.png","height":"80%"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nIf changes are made to the same section (usually the same or consecutive line(s) of text) of a document a "},{"type":"element","tag":"a","props":{"href":"version_control_terminology"},"children":[{"type":"text","value":"merge conflict"}]},{"type":"text","value":" arises. Changes cannot be automatically merged, as the interpreter does not know which version or which combination to use. Human intervention is required and can involve rolling back a change, finding common ground between changes, etc."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Resolving merge conflicts can be time-consuming and error prone, especially for large conflicts. Therefore it is a good idea for teams to agree on some basic practices to avoid creating conflicts in the first place."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"=="}]},{"type":"element","tag":"h2","props":{"id":"merge-conflicts"},"children":[{"type":"text","value":"Merge conflicts"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If two people change the same line..."}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"This line contains a typos.\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"This line contains a typos.\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"... "},{"type":"element","tag":"a","props":{"href":"version_control_terminology"},"children":[{"type":"text","value":"merge conflicts"}]},{"type":"text","value":" may arise:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"<<<<<< HEAD (Current Change)\nThis line contained a typo.\n=======\nThis line contained typos.\n>>>>>> feature-branch (Incoming Change)\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<<<<<< HEAD (Current Change)\nThis line contained a typo.\n=======\nThis line contained typos.\n>>>>>> feature-branch (Incoming Change)\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If changes are made to the same section (usually the same or consecutive line(s) of text) of a document a merge conflict arises. Changes cannot be automatically merged, as the interpreter does not know which version or which combination to use. Human intervention is required and can involve rolling back a change, finding common ground between changes, etc."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Resolving merge conflicts can be time-consuming and error prone, especially for large conflicts. Therefore it is a good idea for teams to agree on some basic practices to avoid creating conflicts in the first place."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"=="}]},{"type":"element","tag":"h2","props":{"id":"avoiding-merge-conflicts"},"children":[{"type":"text","value":"Avoiding merge conflicts"}]},{"type":"element","tag":"div","props":{"style":"display: grid; grid-template-columns: repeat(2, 2fr); gap: 10; text-align: center;"},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"div","props":{"className":["fragment"],"dataFragmentIndex":"1"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"img","props":{"src":"/modules/version-control/media/communication.png","style":"height: 100px;"},"children":[]},{"type":"text","value":"\n      "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Communication"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Who is working on what?"}]},{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Follow or create common standards"}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"div","props":{"className":["fragment"],"dataFragmentIndex":"2"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"img","props":{"src":"/modules/version-control/media/updating.png","style":"height: 100px;"},"children":[]},{"type":"text","value":"\n      "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Frequent updates"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"version_control_terminology"},"children":[{"type":"text","value":"push and pull"}]},{"type":"text","value":" changes regularly"}]},{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Review each other's work before merging"}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"div","props":{"className":["fragment"],"dataFragmentIndex":"3"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"img","props":{"src":"/modules/version-control/media/workflow.png","style":"height: 100px;"},"children":[]},{"type":"text","value":"\n      "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Organized workflow"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Commit hygeine and feature branches"}]},{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Avoid \"scope creep\""}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"div","props":{"className":["fragment"],"dataFragmentIndex":"4"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"img","props":{"src":"/modules/version-control/media/tools.png","style":"height: 100px;"},"children":[]},{"type":"text","value":"\n      "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Tools are your friends"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Kanban boards"}]},{"type":"text","value":" for task assignment"}]},{"type":"text","value":"\n        "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"linters"}]},{"type":"text","value":" for style aherence"}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"small","props":{},"children":[{"type":"text","value":"All icons from "},{"type":"element","tag":"a","props":{"href":"https://icons8.com/icons/pricing"},"children":[{"type":"text","value":"Icons8"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Keep in mind, that it is unrealistic to prevent all conflicts. This is fine, but they will need some attention to resolve."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Communication is key!"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"key-points"},"children":[{"type":"text","value":"Key Points"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Version control is like unlimited undo in MS Word... and more!"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Version control streamlines working in parallel"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A remote repository is often used as central hub for collaborative development"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Communication is key to avoid conflicting versions of the same documents"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://www.esciencecenter.nl","rel":["nofollow"]},"children":[{"type":"text","value":"www.esciencecenter.nl"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"mailto:info@esciencecenter.nl"},"children":[{"type":"text","value":"info@esciencecenter.nl"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"020 - 460 47 70"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"version-control-1","depth":3,"text":"Version Control"},{"id":"documents-are","depth":2,"text":"Documents are..."},{"id":"software-is","depth":2,"text":"Software is..."},{"id":"changes","depth":2,"text":"Changes..."},{"id":"a-commit","depth":2,"text":"A commit..."},{"id":"sequential-commits","depth":2,"text":"Sequential commits..."},{"id":"keeping-track","depth":2,"text":"Keeping track"},{"id":"versioning","depth":2,"text":"Versioning"},{"id":"change-logs-dois","depth":2,"text":"Change logs & DOIs"},{"id":"collaborating-using-vc","depth":2,"text":"Collaborating using VC"},{"id":"branching","depth":2,"text":"Branching"},{"id":"keeping-a-centralized-repository","depth":2,"text":"Keeping a centralized repository"},{"id":"hosting-the-main-repository","depth":2,"text":"Hosting the main repository"},{"id":"what-can-go-wrong","depth":2,"text":"What can go wrong?"},{"id":"merge-conflicts","depth":2,"text":"Merge conflicts"},{"id":"avoiding-merge-conflicts","depth":2,"text":"Avoiding merge conflicts"},{"id":"key-points","depth":2,"text":"Key Points"}]}},"_type":"markdown","_id":"local_fs:modules:version-control:slides-version-control.md","_source":"local_fs","_file":"modules/version-control/slides-version-control.md","_stem":"modules/version-control/slides-version-control","_extension":"md","plainText":"---\ntitle: Version Control Slides\ntype: slides\norder: 1\n---\n\n<!-- .slide: data-state=\"title\"  -->\n# Version Control\n\nWhat is version control and why should I use it?\n\nnote:\nYou are probably using version control every day. Word and other documents store a history of changes for you, which you can undo. Google docs have an even more intricate system of reviewing history, etc.\n\n===\n\n<!-- .slide: data-state=\"standard center\" -->\n### Version Control\n\n*A system that organizes and records changes to a (set of) file(s) and/or their metadata over time, allowing one to\nrevisit specific versions later.*\n\n<div class=\"fragment\" data-fragment-index=\"1\">\n  <img src=\"https://swcarpentry.github.io/git-novice/fig/phd101212s.png\" width=\"38%\">\n  <small> <a href=\"http://www.phdcomics.com\">Piled Higher and Deeper</a> by Jorge Cham </small>\n</div>\n\nnote:\nStrictly speaking, this is a form of version control: separate versions are stored, commented on, and organized in some way.\n\nLets see a more practical, systematic, and robust way of doing this...\n\n===\n\n<!-- .slide: data-state=\"standard center\"  -->\n## Documents are...\n\n<div>\n  ... a series of changes\n  <img style=\"height: 30vh; margin: 0; padding: 0;\" src=\"https://swcarpentry.github.io/git-novice/fig/play-changes.svg\"/>\n</div>\n\nnote:\nIn version control systems, documents start with a base version (which may or may not be empty) and record all the changes that happened on top of that base version. Because of this you can always \"play back\" to an earlier version or compare separate iterations, without having to store near-identical variations of the same documents.\n\n==\n\n<!-- .slide: data-state=\"standard center\"  -->\n## Software is...\n\n... a collection of one or more documents.\n\n- Code\n- Documentation\n- Environment & infrastructural files\n- ...\n\n\nnote:\nAny piece of code is nothing more than a (plain) text document, not too different from a word file. The same is generally true for most other files comprising the software. Therefore, changes are excessively easy and computationally efficient to track.\n\nEven complex (binary, data, image, ...) files can ultimately be rendered in plain text, and therefore tracked using version control. Although changes are not easy to visualize and it will require multiplying the data storage for each change.\n\n===\n\n<!-- .slide: data-state=\"standard center\" -->\n## Changes...\n\n... are stored using a version control (VC) system (usually `git`).\n\n<img src=\"media/git-diff.png\" width=\"70%\">\n\nA single unit of change is called a [commit](version_control_terminology), and is typically associated with a brief [commit message](version_control_terminology), [commit hash](version_control_terminology) (SHA), and other metadata.\n<!-- .element: class=\"fragment\" data-fragment-index=\"1\" -->\n\nnote:\nCommit hashes are unique references to a commit, while commit messages are human readable descriptions. Other metadata can include the author(s), timestamp, etc.\n\n==\n\n<!-- .slide: data-state=\"standard center\"  -->\n## A commit...\n\n... can be of any size or type:\n\n- Single line additions/deletions/changes\n- Additions/deletions/changes of (multiple) large sections\n- Adding or deleting files\n- Moving files into different folders\n- ...\n\nnote:\nA commit is the fundamental unit of change in version control, but its scope is not strictly defined. \n\nIdeally, a commit should be large enough to represent a meaningful improvement while remaining small enough to focus on a single, coherent change. Balancing these factors helps maintain clarity and makes it easier to track, review, and revert changes when needed.\n\n==\n\n<!-- .slide: data-state=\"standard center\" -->\n## Sequential commits...\n\n... form a log\n\nThe data structure that contains the software plus the commit history is called a [repository](version_control_terminology).\n\n<img src=\"media/git-log.png\" width=\"70%\">\n\nnote:\nA good rule of thumb for commit sizing is whether you can write a clear, concise commit message summarizing the change. If the commit is too small, the message will simply describe the specific action taken. If it's too large, summarizing it succinctly becomes difficult. Striking the right balance ultimately also allows the commit log to be read almost like a history book.\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Keeping track\n\n#### Question:\nSay you have dozens (hundreds, thousands, ...) of old versions, how do you manage to find a specific/useful previous version?\n\n- Effective committing (sizing & messages)\n<!-- .element: class=\"fragment\" data-fragment-index=\"1\" -->\n- Versioning systems\n<!-- .element: class=\"fragment\" data-fragment-index=\"1\" -->\n- Create Change logs and DOIs for stable/important versions\n<!-- .element: class=\"fragment\" data-fragment-index=\"1\" -->\n\nnote:\nWe've talked above extensively about commit hygeine, so will now discuss the other 2 aspects.\n\n==\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Versioning\n\nUse a logical system to keep track of (stable) versions\n... and document the system used in the repository.\n\n<div>\n  <ul>\n    <div class=\"fragment\" data-fragment-index=\"1\" style=\"text-align: center;\">\n      <strong>Common systems</strong>:\n    </div>\n    <div class=\"fragment\" data-fragment-index=\"1\">\n      <li><a href=\"https://semver.org/\">Semantic Versioning (SemVer)</a>:\n        <ul>\n          <li>4.3.12 = major.minor.patch</li>\n          <li>pro: version numbers have a functional relevance</li>\n          <li>con: users must keep track of the precise version used</li>\n        </ul>\n      </li>\n    </div>\n    <div class=\"fragment\" data-fragment-index=\"2\">\n      <li><a href=\"https://calver.org/\">Calendar Versioning (CalVer)</a>:\n        <ul>\n          <li>2025.02.03 = YYYY.MM.DD</li>\n          <li>pro: simpler implementation</li>\n          <li>con: development is usually not as linear as this system implies</li>\n        </ul>\n      </li>\n    </div>\n  </ul>\n</div>\n\nnote:\nNot every change or addition needs a new version number; this is what commits are for.\n\nMake sure that whatever versioning system you use is also documented in the repo, so that others (and future you) can see what the logic is.\n\n<!-- TODO: is there a way to make the entire list a single element using md comments rather than defining it as a div? That would make above much more readable. -->\n\n==\n\n<!-- .slide: data-state=\"standard\" -->\n## Change logs & DOIs\n\nKeep a human readable log summarizing the changes of each new version.\n\nHost versions on servers such as [Zenodo](https://zenodo.org/) or [GitHub](https://github.com/)/[GitLab](https://gitlab.com/) to generate a DOI.\n\n<img src=\"media/ChangeLog.png\" width=\"45%\">\n<small>Excerpt of release notes for <a href=\"https://github.com/astral-sh/ruff/releases/tag/0.8.6\">ruff linter v0.8.6</a></small>\n\nnote:\n\nThis is the equivalent of the \"commit message\" at the level of a new version.\n\nThere are a few (near) synonyms used for this: change log, release notes, change history, etc. However, it is separate from the commit log or commit history, as per the comment above.\n\n===\n\n<!-- .slide: data-state=\"standard center\" -->\n## Collaborating using VC\n\nMore than one...\n<!-- .element: class=\"fragment\" data-fragment-index=\"0\" -->\n\n<div style=\"float: left; width: 49%;\" class=\"fragment\" data-fragment-index=\"1\">\n  ... source of change...\n  <img style=\"height: 80%; padding-top: 20px;\" src=\"media/versions.svg\"/>\n</div>\n\n<div style=\"float: right; width: 49%;\" class=\"fragment\" data-fragment-index=\"2\">\n  ... can be merged.\n  <img style=\"height: 80%; padding-top: 20px;\" src=\"media/merge.svg\"/>\n</div>\n\nnote:\nWhen collaborating you might have various versions (sets of changes) that co-exist at the same time on so called \"branches\". Modern version control software can usually automatically merge multiple changes into a single document.\n\n==\n\n<!-- .slide: data-state=\"standard center\" -->\n## Branching\n\nA project can have many [branches](version_control_terminology), which may or may not get [merged](version_control_terminology) back into the main version.\n\n<img src=\"https://book.the-turing-way.org/_images/sub-branch.png\" width=\"60%\">\n<small> Image by: <a href=\"https://book.the-turing-way.org/reproducible-research/vcs/vcs-workflow-branches\">The Turing Way</a></small>\n\n**What uses can you think of to create branches, other than \"feature branches\"?**\n<!-- .element: class=\"fragment\" data-fragment-index=\"1\" -->\n\nnote:\nThe main branch is supposed to be a stable version, that one can mostly rely on to work as expected. Changes created in branches may get merged back into the stable version, or may persist (or die) as a parallel version\nBranches here are indicated as \"feature branches\", i.e. branches used while creating new features in a code base.\n\nOther uses of branches:\n- a sandbox or playground, for trying out different things without \"damaging\" the stable version\n- organizing/storing results alongside their different variations/settings\n- release management\n- custom/user specific changes\n- ...\n\n==\n\n<!-- .slide: data-state=\"standard center\" -->\n## Keeping a centralized repository\n\n<img style=\"height: 350px;\" src=\"https://www.researchgate.net/profile/Mark-Ziemann/publication/371671830/figure/fig2/AS:11431281168661745@1687060872300/Distributed-version-control-Adapted-from-48.png\" alt=\"Distributed version control. Adapted from [48].\"/>\n\n<small>[The five pillars of computational reproducibility: Bioinformatics and beyond](https://www.researchgate.net/figure/Distributed-version-control-Adapted-from-48_fig2_371671830)</small>\n\n\nnote:\nCollaborative code developers often make use of a remote server (like GitHub, or GitLab) as a central repository from which all other repositories derive. But this is not the only way you can use version control to do collaborative development.\n\nSeparate local repositories are similar to but distinct from individual branches of the main repository.\n\n==\n\n<!-- .slide: data-state=\"standard center\" -->\n## Hosting the main repository\n\n<img src=\"media/repository_logos_focused.png\" width=\"80%\"> <!-- non-focused image can be found until SHA 8c658f43, v1.6.0 -->\n\n\nnote:\nMany different tools exist specifically for collaborative version control of computer source code and other simple text-based documents.\n\nGit (for version control) with GitLab and GitHub (for collaboration) are the mainstream, used by many and with lots of features. We recommend against using any of the other tools unless the users already know what they are doing or have very strong reasons for dloing so.\n\nGitLab is fully open source and offers a self-managed option, allowing organizations to host and manage their own GitLab instances on-premises or in their private cloud environments. This provides full control over data and customization.\n\nConversely, GitHub is owned by Microsoft and uses (some) proprietary software, but is more widely used and more people will be familiar with the interface and functionality. It offers no self-managed option, but does allow for private repositories.\n\n===\n\n<!-- .slide: data-state=\"standard center\" -->\n## What can go wrong?\n\n<img src=\"media/conflict.png\" height=\"80%\">\n\nnote:\nIf changes are made to the same section (usually the same or consecutive line(s) of text) of a document a [merge conflict](version_control_terminology) arises. Changes cannot be automatically merged, as the interpreter does not know which version or which combination to use. Human intervention is required and can involve rolling back a change, finding common ground between changes, etc.\n\nResolving merge conflicts can be time-consuming and error prone, especially for large conflicts. Therefore it is a good idea for teams to agree on some basic practices to avoid creating conflicts in the first place.\n\n==\n\n<!-- .slide: data-state=\"standard\" -->\n## Merge conflicts\n\nIf two people change the same line...\n\n```bash\nThis line contains a typos.\n```\n... [merge conflicts](version_control_terminology) may arise:\n<!-- .element: class=\"fragment\" data-fragment-index=\"1\" -->\n\n```bash\n<<<<<< HEAD (Current Change)\nThis line contained a typo.\n=======\nThis line contained typos.\n>>>>>> feature-branch (Incoming Change)\n```\n<!-- .element: class=\"fragment\" data-fragment-index=\"1\" -->\n\nnote:\n\nIf changes are made to the same section (usually the same or consecutive line(s) of text) of a document a merge conflict arises. Changes cannot be automatically merged, as the interpreter does not know which version or which combination to use. Human intervention is required and can involve rolling back a change, finding common ground between changes, etc.\n\nResolving merge conflicts can be time-consuming and error prone, especially for large conflicts. Therefore it is a good idea for teams to agree on some basic practices to avoid creating conflicts in the first place.\n\n==\n\n<!-- .slide: data-state=\"standard\" -->\n## Avoiding merge conflicts\n\n<div style=\"display: grid; grid-template-columns: repeat(2, 2fr); gap: 10; text-align: center;\">\n  <div class=\"fragment\" data-fragment-index=\"1\">\n    <div>\n      <img src=\"media/communication.png\" style=\"height: 100px;\">\n      <strong>Communication</strong>\n      <ul>\n        <li>Who is working on what?</li>\n        <li>Follow or create common standards</li>\n      </ul>\n    </div>\n  </div>\n  <div class=\"fragment\" data-fragment-index=\"2\">\n    <div>\n      <img src=\"media/updating.png\" style=\"height: 100px;\">\n      <strong>Frequent updates</strong>\n      <ul>\n        <li><a href=\"version_control_terminology\">push and pull</a> changes regularly</li>\n        <li>Review each other's work before merging</li>\n      </ul>\n    </div>\n  </div>\n  <div class=\"fragment\" data-fragment-index=\"3\">\n    <div>\n      <img src=\"media/workflow.png\" style=\"height: 100px;\">\n      <strong>Organized workflow</strong>\n      <ul>\n        <li>Commit hygeine and feature branches</li>\n        <li>Avoid \"scope creep\"</li>\n      </ul>\n    </div>\n  </div>\n  <div class=\"fragment\" data-fragment-index=\"4\">\n    <div>\n      <img src=\"media/tools.png\" style=\"height: 100px;\">\n      <strong>Tools are your friends</strong>\n      <ul>\n        <li><em>Kanban boards</em> for task assignment</li>\n        <li><em>linters</em> for style aherence</li>\n      </ul>\n    </div>\n  </div>\n</div>\n\n<small>All icons from <a href=\"https://icons8.com/icons/pricing\">Icons8</a></small>\n\nnote:\n\nKeep in mind, that it is unrealistic to prevent all conflicts. This is fine, but they will need some attention to resolve.\n\nCommunication is key!\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Key Points\n- Version control is like unlimited undo in MS Word... and more!\n- Version control streamlines working in parallel\n- A remote repository is often used as central hub for collaborative development\n- Communication is key to avoid conflicting versions of the same documents\n\n===\n\n<!-- .slide: data-state=\"keepintouch\" -->\n\nwww.esciencecenter.nl\n\ninfo@esciencecenter.nl\n\n020 - 460 47 70\n"},{"_path":"/modules/version-control/version_control_terminology","_dir":"version-control","_draft":false,"_partial":false,"_locale":"","title":"Terminology","description":"","type":"reading","order":2,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"terminology"},"children":[{"type":"text","value":"Terminology"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Branch"}]},{"type":"text","value":": A parallel version of the code that allows independent development without affecting the main (set of) file(s). Each branch starts from an existing "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"commit"}]},{"type":"text","value":" and can evolve separately, enabling multiple changes to be worked on simultaneously. Branches are commonly used for features, bug fixes, or experiments before merging them back into the main branch (often called the trunk or default branch)."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Commit (noun)"}]},{"type":"text","value":": A commit or changeset is a set of alterations packaged together, along with meta-information  about the alterations. A commit/changeset describes the exact differences between two successive versions in the "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"version control system's"}]},{"type":"text","value":" "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"repository"}]},{"type":"text","value":" of changes along with information about the context of these changes, e.g. author, date, description ("},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"commit message"}]},{"type":"text","value":") and a pointer to the parent commit, as well as a unique ID ("},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"commit hash"}]},{"type":"text","value":")."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Commit (verb)"}]},{"type":"text","value":": To write the changes made in a "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"working copy"}]},{"type":"text","value":" into the "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"repository"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Commit hash"}]},{"type":"text","value":": A unique identifier (usually an SHA-1 hash in Git) that represents a specific "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"commit"}]},{"type":"text","value":". This hash is generated based on the commit’s content, metadata, and parent commit(s), ensuring that each commit has a distinct and immutable reference."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Commit message"}]},{"type":"text","value":": A short description provided by the developer when creating a "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"commit"}]},{"type":"text","value":". It explains the purpose of the commit and helps others understand the changes. Good commit messages improve collaboration, history tracking, and debugging."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Merge"}]},{"type":"text","value":": The process of integrating changes from one "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"branch"}]},{"type":"text","value":" into another. Typically, a feature or bugfix branch is merged into the main branch to include the new changes. Merging combines the commit history and resolves differences between branches."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Merge conflict"}]},{"type":"text","value":": A situation that occurs when two "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"branches"}]},{"type":"text","value":" modify the same part of a file in incompatible ways. "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Version control systems"}]},{"type":"text","value":" require manual resolution to decide which changes should be kept before completing the merge."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Pull/push"}]},{"type":"text","value":": Copy revisions/"},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"commits"}]},{"type":"text","value":" from one "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"repository"}]},{"type":"text","value":" into another. Pull is initiated by the receiving repository, while push is initiated by the source. Fetch is sometimes used as a synonym for pull, or to mean a pull followed by an update."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Pull/merge request"}]},{"type":"text","value":": Contributions to a source code "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"repository"}]},{"type":"text","value":" that uses a distributed "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"version control system"}]},{"type":"text","value":" are commonly made by means of a pull request or merge request (synonyms). The contributor requests the project maintainer to "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"pull"}]},{"type":"text","value":" and "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"merge"}]},{"type":"text","value":" their changes to integrate it into the code base, hence the name."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Repository"}]},{"type":"text","value":": In "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"version control systems"}]},{"type":"text","value":", a repository is a database that contains a set of files and all changes that have been made to them over time, possibly on different branches."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Version Control System"}]},{"type":"text","value":": A system that tracks changes to files over time, allowing collaboration, parallel development, and the ability to revert to previous states. Git is most commonly used for software in the present day."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Working copy"}]},{"type":"text","value":": The working copy is the local copy of files from a "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"repository"}]},{"type":"text","value":". All work done to the files in a repository is initially done on a working copy, hence the name."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://training.github.com/downloads/github-git-cheat-sheet.pdf","rel":["nofollow"]},"children":[{"type":"text","value":"Git commands cheat sheet"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"terminology","depth":2,"text":"Terminology"}]}},"_type":"markdown","_id":"local_fs:modules:version-control:version_control_terminology.md","_source":"local_fs","_file":"modules/version-control/version_control_terminology.md","_stem":"modules/version-control/version_control_terminology","_extension":"md","plainText":"---\ntitle: Terminology\ntype: reading\norder: 2\n---\n\n## Terminology\n* **Branch**: A parallel version of the code that allows independent development without affecting the main (set of) file(s). Each branch starts from an existing *commit* and can evolve separately, enabling multiple changes to be worked on simultaneously. Branches are commonly used for features, bug fixes, or experiments before merging them back into the main branch (often called the trunk or default branch).\n* **Commit (noun)**: A commit or changeset is a set of alterations packaged together, along with meta-information  about the alterations. A commit/changeset describes the exact differences between two successive versions in the *version control system's* *repository* of changes along with information about the context of these changes, e.g. author, date, description (*commit message*) and a pointer to the parent commit, as well as a unique ID (*commit hash*).\n* **Commit (verb)**: To write the changes made in a *working copy* into the *repository*.\n* **Commit hash**: A unique identifier (usually an SHA-1 hash in Git) that represents a specific *commit*. This hash is generated based on the commit’s content, metadata, and parent commit(s), ensuring that each commit has a distinct and immutable reference.\n* **Commit message**: A short description provided by the developer when creating a *commit*. It explains the purpose of the commit and helps others understand the changes. Good commit messages improve collaboration, history tracking, and debugging.\n* **Merge**: The process of integrating changes from one *branch* into another. Typically, a feature or bugfix branch is merged into the main branch to include the new changes. Merging combines the commit history and resolves differences between branches.\n* **Merge conflict**: A situation that occurs when two *branches* modify the same part of a file in incompatible ways. *Version control systems* require manual resolution to decide which changes should be kept before completing the merge.\n* **Pull/push**: Copy revisions/*commits* from one *repository* into another. Pull is initiated by the receiving repository, while push is initiated by the source. Fetch is sometimes used as a synonym for pull, or to mean a pull followed by an update. \n* **Pull/merge request**: Contributions to a source code *repository* that uses a distributed *version control system* are commonly made by means of a pull request or merge request (synonyms). The contributor requests the project maintainer to *pull* and *merge* their changes to integrate it into the code base, hence the name.\n* **Repository**: In *version control systems*, a repository is a database that contains a set of files and all changes that have been made to them over time, possibly on different branches.\n* **Version Control System**: A system that tracks changes to files over time, allowing collaboration, parallel development, and the ability to revert to previous states. Git is most commonly used for software in the present day.\n* **Working copy**: The working copy is the local copy of files from a *repository*. All work done to the files in a repository is initially done on a working copy, hence the name.\n\n[Git commands cheat sheet](https://training.github.com/downloads/github-git-cheat-sheet.pdf)\n"},{"_path":"/modules/version-control/version_control_exercise","_dir":"version-control","_draft":false,"_partial":false,"_locale":"","title":"What to include in the repository","description":"","type":"exercise","order":3,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"exercise-which-of-the-following-do-you-think-should-be-part-of-a-code-repository-5-10-mins"},"children":[{"type":"text","value":"Exercise: Which of the following do you think should be part of a code repository (5-10 mins)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Discuss with your neighbor which of the following should be part of the code repository and why it should or should not."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"installation instructions (i.e. detailed instructions on how to install the software)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"user documentation (i.e. information for the users of the software about its functionality and features)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"full dataset to reproduce figures from a paper"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"a few data files to test the functionality of the code base"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"in-line comments intended only for code developers"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"exercise-which-of-the-following-do-you-think-should-be-part-of-a-code-repository-5-10-mins","depth":2,"text":"Exercise: Which of the following do you think should be part of a code repository (5-10 mins)"}]}},"_type":"markdown","_id":"local_fs:modules:version-control:version_control_exercise.md","_source":"local_fs","_file":"modules/version-control/version_control_exercise.md","_stem":"modules/version-control/version_control_exercise","_extension":"md","plainText":"---\ntitle: What to include in the repository\ntype: exercise\norder: 3\n---\n\n## Exercise: Which of the following do you think should be part of a code repository (5-10 mins)\n\nDiscuss with your neighbor which of the following should be part of the code repository and why it should or should not.\n\n- installation instructions (i.e. detailed instructions on how to install the software)\n- user documentation (i.e. information for the users of the software about its functionality and features)\n- full dataset to reproduce figures from a paper\n- a few data files to test the functionality of the code base\n- in-line comments intended only for code developers\n"},{"_path":"/modules/version-control/version_control_resources","_dir":"version-control","_draft":false,"_partial":false,"_locale":"","title":"Further reading","description":"","type":"reading","order":5,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"resources"},"children":[{"type":"text","value":"Resources"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://swcarpentry.github.io/git-novice/01-basics.html","rel":["nofollow"]},"children":[{"type":"text","value":"Version Control with Git: Automated Version Control (swcarpentry.github.io)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://training.github.com/downloads/github-git-cheat-sheet.pdf","rel":["nofollow"]},"children":[{"type":"text","value":"Git commands cheat sheet"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://the-turing-way.netlify.app/reproducible-research/vcs","rel":["nofollow"]},"children":[{"type":"text","value":"https://the-turing-way.netlify.app/reproducible-research/vcs"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://coderefinery.github.io/git-intro/","rel":["nofollow"]},"children":[{"type":"text","value":"https://coderefinery.github.io/git-intro/"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"resources","depth":2,"text":"Resources"}]}},"_type":"markdown","_id":"local_fs:modules:version-control:version_control_resources.md","_source":"local_fs","_file":"modules/version-control/version_control_resources.md","_stem":"modules/version-control/version_control_resources","_extension":"md","plainText":"---\ntitle: Further reading\ntype: reading\norder: 5\n---\n\n## Resources\n\n[Version Control with Git: Automated Version Control (swcarpentry.github.io)](https://swcarpentry.github.io/git-novice/01-basics.html) \n\n[Git commands cheat sheet](https://training.github.com/downloads/github-git-cheat-sheet.pdf)\n\nhttps://the-turing-way.netlify.app/reproducible-research/vcs \n\nhttps://coderefinery.github.io/git-intro/"}]