[{"_path":"/modules/distributing/info","_dir":"distributing","_draft":false,"_partial":false,"_locale":"","title":"Learning objectives","description":"Obtain the skills and knowledge necessary to address the following questions:","type":"info","order":0,"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Obtain the skills and knowledge necessary to address the following questions:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What is software distribution and what aspects of it are important for research software?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Why is it important to think about dependency management?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What are environments, dependencies, packages and containers?"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"local_fs:modules:distributing:info.md","_source":"local_fs","_file":"modules/distributing/info.md","_stem":"modules/distributing/info","_extension":"md","plainText":"---\ntitle: Learning objectives\ntype: info\norder: 0\n---\n\nObtain the skills and knowledge necessary to address the following questions:\n- What is software distribution and what aspects of it are important for research software?\n- Why is it important to think about dependency management?\n- What are environments, dependencies, packages and containers?"},{"_path":"/modules/distributing/slides-distributing","_dir":"distributing","_draft":false,"_partial":false,"_locale":"","title":"Distributing Software","description":"===","type":"slides","order":1,"author":"Jaro Camphuijsen, Lourens Veen","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"distributing-software"},"children":[{"type":"text","value":"Distributing Software"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-distribute"},"children":[{"type":"text","value":"Why distribute?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"For your future self"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"For others that might be interested"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"For reproducibility"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"For reusability"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nThere are many reasons why you would want to distribute your software."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"why-cant-i-just-publish-and-be-done"},"children":[{"type":"text","value":"Why can't I just publish and be done?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A piece of software never operates in isolation."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Depends on other software (third party packages, libraries)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Depends on system software (operating system, drivers, firmware)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Depends on hardware (your computer and the chips inside, display or printer)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The world (hardware, software, people) around your software is constantly evolving"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nSoftware by nature always depends on other software and hardware."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note: Sometimes you enter dependency hell"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-issues-may-arise"},"children":[{"type":"text","value":"What issues may arise?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Many dependencies"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Long chains of dependencies"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Conflicting dependencies"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Circular dependencies"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Package manager dependencies"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Diamond dependency"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"... and all of these are changing."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"what-solutions-exist"},"children":[{"type":"text","value":"What solutions exist?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Isolation or specification"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"isolation"},"children":[{"type":"text","value":"Isolation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Layers of isolation","src":"/modules/distributing/media/distributing-software-layers.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"specification"},"children":[{"type":"text","value":"Specification"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let the user (or some tool) solve the probem..."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"requirements.txt"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"environment.yml"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"pyproject.toml"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"package.json\netc..."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nSpecify the dependencies in a file and let the user build their own environment, container or vm."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"considerations"},"children":[{"type":"text","value":"Considerations"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Large amount of isolation enhances reproducibility but decreases flexibility."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Leaving it up to the user can be done for simple scripts (most research software)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"rules-of-thumb"},"children":[{"type":"text","value":"Rules of thumb"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Simple scripts can use a simple dependency specification"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"If other software might depend on this software, package it"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"To archive a specific software version and its environment, you could use a container"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"why-distribute","depth":2,"text":"Why distribute?"},{"id":"why-cant-i-just-publish-and-be-done","depth":2,"text":"Why can't I just publish and be done?"},{"id":"what-issues-may-arise","depth":2,"text":"What issues may arise?"},{"id":"what-solutions-exist","depth":2,"text":"What solutions exist?"},{"id":"isolation","depth":2,"text":"Isolation"},{"id":"specification","depth":2,"text":"Specification"},{"id":"considerations","depth":2,"text":"Considerations"},{"id":"rules-of-thumb","depth":2,"text":"Rules of thumb"}]}},"_type":"markdown","_id":"local_fs:modules:distributing:slides-distributing.md","_source":"local_fs","_file":"modules/distributing/slides-distributing.md","_stem":"modules/distributing/slides-distributing","_extension":"md","plainText":"---\ntitle: Distributing Software\ntype: slides\norder: 1\nauthor: Jaro Camphuijsen, Lourens Veen\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Distributing Software\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Why distribute?\n\n- For your future self\n- For others that might be interested\n- For reproducibility \n- For reusability\n\nnote:\nThere are many reasons why you would want to distribute your software. \n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Why can't I just publish and be done?\n\n- A piece of software never operates in isolation. \n- Depends on other software (third party packages, libraries)\n- Depends on system software (operating system, drivers, firmware)\n- Depends on hardware (your computer and the chips inside, display or printer)\n- The world (hardware, software, people) around your software is constantly evolving\n\nnote:\nSoftware by nature always depends on other software and hardware. \n\n===\n\n<!-- .slide: data-state=\"standard\" data-background-image=\"media/fire.png\"-->\n\nnote: Sometimes you enter dependency hell\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What issues may arise?\n\n- Many dependencies\n- Long chains of dependencies\n- Conflicting dependencies\n- Circular dependencies\n- Package manager dependencies\n- Diamond dependency\n\n... and all of these are changing.\n\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What solutions exist?\n\nIsolation or specification\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Isolation\n\n![Layers of isolation](media/distributing-software-layers.png)\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Specification\n\nLet the user (or some tool) solve the probem...\n\n- requirements.txt\n- environment.yml\n- pyproject.toml\n- package.json\netc...\n\nnote:\nSpecify the dependencies in a file and let the user build their own environment, container or vm.\n\n===\n\n## Considerations\n\n- Large amount of isolation enhances reproducibility but decreases flexibility.\n- Leaving it up to the user can be done for simple scripts (most research software)\n\n===\n\n## Rules of thumb   \n\n- Simple scripts can use a simple dependency specification\n- If other software might depend on this software, package it\n- To archive a specific software version and its environment, you could use a container\n\n"},{"_path":"/modules/distributing/exercise-tracking","_dir":"distributing","_draft":false,"_partial":false,"_locale":"","title":"Dependency tracking","description":"","type":"exercise","order":3,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"dependency-tracking-10-minutes"},"children":[{"type":"text","value":"Dependency tracking (10 minutes)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A common place to specify dependencies is in a file called "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"requirements.txt"}]},{"type":"text","value":", "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"pyproject.toml"}]},{"type":"text","value":" or "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"environment.yml"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Go into a source code repository of a piece of software you know and try to track down dependencies. Try to also find the soruce code of one of the dependencies and see if you can find the dependencies of this dependency. How many layers of this \"dependency tree\" can you follow?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also use one of the following projects:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://research-software-directory.org/software/esmvaltool","rel":["nofollow"]},"children":[{"type":"text","value":"ESMValTool"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://research-software-directory.org/software/litstudy","rel":["nofollow"]},"children":[{"type":"text","value":"LitStudy"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://research-software-directory.org/software/haddock3","rel":["nofollow"]},"children":[{"type":"text","value":"Haddock"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://cjvanlissa.github.io/worcs/index.html","rel":["nofollow"]},"children":[{"type":"text","value":"worcs"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://research-software-directory.org/software/democracy-topic-modelling","rel":["nofollow"]},"children":[{"type":"text","value":"democracy-topic-modelling"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"dependency-tracking-10-minutes","depth":2,"text":"Dependency tracking (10 minutes)"}]}},"_type":"markdown","_id":"local_fs:modules:distributing:exercise-tracking.md","_source":"local_fs","_file":"modules/distributing/exercise-tracking.md","_stem":"modules/distributing/exercise-tracking","_extension":"md","plainText":"---\ntitle: Dependency tracking\ntype: exercise\norder: 3\n---\n\n## Dependency tracking (10 minutes)\n\nA common place to specify dependencies is in a file called `requirements.txt`, `pyproject.toml` or `environment.yml`. \n\nGo into a source code repository of a piece of software you know and try to track down dependencies. Try to also find the soruce code of one of the dependencies and see if you can find the dependencies of this dependency. How many layers of this \"dependency tree\" can you follow?\n\nYou can also use one of the following projects: \n\n- [ESMValTool](https://research-software-directory.org/software/esmvaltool)\n- [LitStudy](https://research-software-directory.org/software/litstudy)\n- [Haddock](https://research-software-directory.org/software/haddock3)\n- [worcs](https://cjvanlissa.github.io/worcs/index.html)\n- [democracy-topic-modelling](https://research-software-directory.org/software/democracy-topic-modelling)"},{"_path":"/modules/distributing/distributing","_dir":"distributing","_draft":false,"_partial":false,"_locale":"","title":"Distributing Software","description":"How do you make it easy for someone else to obtain a copy and get it set up on their computer so that they can use it?","type":"reading","order":4,"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"distributing-software-10-minutes"},"children":[{"type":"text","value":"Distributing software (10 minutes)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"How do you make it easy for someone else to obtain a copy and get it set up on their computer so that they can use it?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Modern software contsists of an often large collection of components (libraries, packages) that are combined together to form an application. This whole collection needs to be reproduced on the computer of the user for things to work. There are two ways of doing that: 1) combining them all together on the computer of the developer, and then wrapping everything up into a package, installer, container image, or VM image that is sent to the user, or 2) putting the components that you made yourself on the Internet (as a package), and relying on the user to download the other components (packages) and assembling it all together into a working application."}]},{"type":"element","tag":"h2","props":{"id":"monolithic-applications"},"children":[{"type":"text","value":"Monolithic applications"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Option 1) works for applications, which are more or less independent. If they're used together, then it's by saving a file from one and opening it in another application. Each application contains all the bits it needs, and is installed on the user's computer in a separate folder, away from everything else. That means that different applications don't get in each other's way, but it's also rather inefficient if many applications use the same component, because you end up with many copies of that component."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you do choose option 1), then you still have a choice between making a package, an installer, a container image, or a virtual machine image. A package is an archive (think a ZIP-file, which it often literally is) that contains, in this case, all the components needed by the application. Since it's just a file, a package needs to be installed by a special program called a package manager. The App Store or Play Store on your phone is such a program."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"An installer is itself a computer program, that also contains all the components needed by the application. It gets downloaded by the user, who then runs it, after which it copies all the components from within itself onto the user's computer. It can then run there just like an application installed from a package using a package manager."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A container image is a special kind of package. It also contains all the parts needed to run a program, but it is run in a special isolated environment called a container. A normal application can access everything else on the computer, including files and parts of other applications. It's set up to use its own components of course, but it could access other things if it wanted or needed to. An application that runs in a container can't do this, it's isolated from everything else except for the operating system. This is an advantage for example if the software runs on a server that is accessible from the Internet, because it provides some security. It also makes it easy to run many copies of the software on many servers, so that you can serve many users."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A Virtual Machine finally is even more isolated. It contains its own operating system together with the application, so that the running application cannot even access the operating system on the user's computer. This has similar advantages as a container, being more secure, but it's also slower than using containers."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"So these are the different ways option 1), distributing a monolithic application with everything included, can be implemented. As said, this reduces potential compatibility problems, but isn't very efficient because you end up with many copies of everything."}]},{"type":"element","tag":"h2","props":{"id":"separate-packages"},"children":[{"type":"text","value":"Separate packages"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Option 2) is more efficient than option 1), because the user can just install each component once, and then every other component that needs it can use it. There are drawbacks here as well though. First, the user needs to figure out which components are needed for a particular application, and then install them one by one. This puts them in an unpleasant place called \"dependency hell\"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Dependency hell was mostly solved by the invention of package managers, which automate the process of downloading and installing the required components. Example are pip, conda, apt, and Homebrew. If each component is put into a package with some metadata that describes which other packages it needs, then the package manager can do all that automatically, at least assuming that everything is Open Source and freely available online, because it cannot go to the shop to buy a license for everything. Still, often everything is Open Source and then this saves a huge amount of work. Dependency hell is not the only problem however."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Software is continuously developed, and that means that it changes over time. Those changes sometimes change how a component is used by other components, which then need to be updated too. So the user may end up with an older program that only works with an older version of component X, while they also want to used a different newer program that works only with a newer version of X. A good package manager will give an error message in that case, but that doesn't solve the problem. Which version do you install?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"There are again two common solutions to this, distributions and environments. A distribution, like Ubuntu, is made by a group of people who create a collection of packages that are all compatible with each other, meaning that every package in it that uses package X works with the same version of package X, namely the one that's included in the distribution. This takes a significant amount of work, but it's very nice because you only have one version of everything, and maximal space efficiency. Of course there are still updates, but they happen once every six months or several years, and then everything is updated at once. That does mean that you don't get the latest version right away, but also that things just work and don't suddenly break. (Cathedral!)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Another way to fix the multiple options of X problem is to use environments. An environment is a separate part of the computer into which packages can be installed, in such a way that only packages within the environment are combined. So now you can install one application in one environment with one version of X, and the other application in another environment with another version of X. That costs more disk space, but it's easier to get the latest stuff, and it doesn't require all the work of constantly ensuring everything is compatible. So this makes option 2) look a bit more like option 1) again, although you can still have fewer environments than you have applications. (Bazaar!)"}]},{"type":"element","tag":"h2","props":{"id":"which-option-to-choose-when"},"children":[{"type":"text","value":"Which option to choose when"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Scientific software is often a script, which is basically the topmost component in the whole collection of components. Scripts mostly just tell other components what to do. Since the script isn't used by other components, it can be packaged as an application in either of the above-mentioned ways. Users can the install and run it to "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"reproduce"}]},{"type":"text","value":" the results, but not easily use it in their own script or modify it to do something different but related."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Sometimes, scientists (or Research Software Engineers!) develop components that are intended for use by others in their scripts, or even in other components. Those need to be packaged as packages for a package manager, because they need to be combined with other packages on the user's computer. (The user is a programmer, in this case!) This allows the software to be "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"reused"}]},{"type":"text","value":" by others in their scripts."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Finally, for others to be able to modify the software and perhaps contribute some new feature or fixes back to it, the source code of the software needs to be available through a public repository. Package managers and installers don't normally install software in a way that makes it easy to modify, as that's not what they're designed for. To be able to modify the software, you need the source code, in a version control system. So besides in a package or container repository, don't forget to make a public git repository too!"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"monolithic-applications","depth":2,"text":"Monolithic applications"},{"id":"separate-packages","depth":2,"text":"Separate packages"},{"id":"which-option-to-choose-when","depth":2,"text":"Which option to choose when"}]}},"_type":"markdown","_id":"local_fs:modules:distributing:distributing.md","_source":"local_fs","_file":"modules/distributing/distributing.md","_stem":"modules/distributing/distributing","_extension":"md","plainText":"---\ntitle: Distributing Software\ntype: reading\norder: 4\n---\n\n# Distributing software (10 minutes)\n\nHow do you make it easy for someone else to obtain a copy and get it set up on their computer so that they can use it?\n\nModern software contsists of an often large collection of components (libraries, packages) that are combined together to form an application. This whole collection needs to be reproduced on the computer of the user for things to work. There are two ways of doing that: 1) combining them all together on the computer of the developer, and then wrapping everything up into a package, installer, container image, or VM image that is sent to the user, or 2) putting the components that you made yourself on the Internet (as a package), and relying on the user to download the other components (packages) and assembling it all together into a working application.\n\n## Monolithic applications\n\nOption 1) works for applications, which are more or less independent. If they're used together, then it's by saving a file from one and opening it in another application. Each application contains all the bits it needs, and is installed on the user's computer in a separate folder, away from everything else. That means that different applications don't get in each other's way, but it's also rather inefficient if many applications use the same component, because you end up with many copies of that component.\n\nIf you do choose option 1), then you still have a choice between making a package, an installer, a container image, or a virtual machine image. A package is an archive (think a ZIP-file, which it often literally is) that contains, in this case, all the components needed by the application. Since it's just a file, a package needs to be installed by a special program called a package manager. The App Store or Play Store on your phone is such a program.\n\nAn installer is itself a computer program, that also contains all the components needed by the application. It gets downloaded by the user, who then runs it, after which it copies all the components from within itself onto the user's computer. It can then run there just like an application installed from a package using a package manager.\n\nA container image is a special kind of package. It also contains all the parts needed to run a program, but it is run in a special isolated environment called a container. A normal application can access everything else on the computer, including files and parts of other applications. It's set up to use its own components of course, but it could access other things if it wanted or needed to. An application that runs in a container can't do this, it's isolated from everything else except for the operating system. This is an advantage for example if the software runs on a server that is accessible from the Internet, because it provides some security. It also makes it easy to run many copies of the software on many servers, so that you can serve many users.\n\nA Virtual Machine finally is even more isolated. It contains its own operating system together with the application, so that the running application cannot even access the operating system on the user's computer. This has similar advantages as a container, being more secure, but it's also slower than using containers.\n\nSo these are the different ways option 1), distributing a monolithic application with everything included, can be implemented. As said, this reduces potential compatibility problems, but isn't very efficient because you end up with many copies of everything.\n\n## Separate packages\n\nOption 2) is more efficient than option 1), because the user can just install each component once, and then every other component that needs it can use it. There are drawbacks here as well though. First, the user needs to figure out which components are needed for a particular application, and then install them one by one. This puts them in an unpleasant place called \"dependency hell\".\n\nDependency hell was mostly solved by the invention of package managers, which automate the process of downloading and installing the required components. Example are pip, conda, apt, and Homebrew. If each component is put into a package with some metadata that describes which other packages it needs, then the package manager can do all that automatically, at least assuming that everything is Open Source and freely available online, because it cannot go to the shop to buy a license for everything. Still, often everything is Open Source and then this saves a huge amount of work. Dependency hell is not the only problem however.\n\nSoftware is continuously developed, and that means that it changes over time. Those changes sometimes change how a component is used by other components, which then need to be updated too. So the user may end up with an older program that only works with an older version of component X, while they also want to used a different newer program that works only with a newer version of X. A good package manager will give an error message in that case, but that doesn't solve the problem. Which version do you install?\n\nThere are again two common solutions to this, distributions and environments. A distribution, like Ubuntu, is made by a group of people who create a collection of packages that are all compatible with each other, meaning that every package in it that uses package X works with the same version of package X, namely the one that's included in the distribution. This takes a significant amount of work, but it's very nice because you only have one version of everything, and maximal space efficiency. Of course there are still updates, but they happen once every six months or several years, and then everything is updated at once. That does mean that you don't get the latest version right away, but also that things just work and don't suddenly break. (Cathedral!)\n\nAnother way to fix the multiple options of X problem is to use environments. An environment is a separate part of the computer into which packages can be installed, in such a way that only packages within the environment are combined. So now you can install one application in one environment with one version of X, and the other application in another environment with another version of X. That costs more disk space, but it's easier to get the latest stuff, and it doesn't require all the work of constantly ensuring everything is compatible. So this makes option 2) look a bit more like option 1) again, although you can still have fewer environments than you have applications. (Bazaar!)\n\n## Which option to choose when\n\nScientific software is often a script, which is basically the topmost component in the whole collection of components. Scripts mostly just tell other components what to do. Since the script isn't used by other components, it can be packaged as an application in either of the above-mentioned ways. Users can the install and run it to *reproduce* the results, but not easily use it in their own script or modify it to do something different but related.\n\nSometimes, scientists (or Research Software Engineers!) develop components that are intended for use by others in their scripts, or even in other components. Those need to be packaged as packages for a package manager, because they need to be combined with other packages on the user's computer. (The user is a programmer, in this case!) This allows the software to be *reused* by others in their scripts.\n\nFinally, for others to be able to modify the software and perhaps contribute some new feature or fixes back to it, the source code of the software needs to be available through a public repository. Package managers and installers don't normally install software in a way that makes it easy to modify, as that's not what they're designed for. To be able to modify the software, you need the source code, in a version control system. So besides in a package or container repository, don't forget to make a public git repository too!"},{"_path":"/modules/distributing/further-reading","_dir":"distributing","_draft":false,"_partial":false,"_locale":"","title":"Further reading","description":"","type":"reading","order":5,"body":{"type":"root","children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Blogpost: "},{"type":"element","tag":"a","props":{"href":"https://medium.com/kitchen-sink-data-science/software-fundamentals-for-machine-learning-series-understanding-the-why-of-vms-containers-89621cf66d23","rel":["nofollow"]},"children":[{"type":"text","value":"Understanding the “Why” of VM’s, Containers, & Virtual Environments"}]},{"type":"text","value":" Blogpost on the difference between"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"local_fs:modules:distributing:further-reading.md","_source":"local_fs","_file":"modules/distributing/further-reading.md","_stem":"modules/distributing/further-reading","_extension":"md","plainText":"---\ntitle: Further reading\ntype: reading\norder: 5\n---\n\n- Blogpost: [Understanding the “Why” of VM’s, Containers, & Virtual Environments](https://medium.com/kitchen-sink-data-science/software-fundamentals-for-machine-learning-series-understanding-the-why-of-vms-containers-89621cf66d23) Blogpost on the difference between "}]