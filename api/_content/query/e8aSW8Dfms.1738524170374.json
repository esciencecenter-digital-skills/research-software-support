[{"_path":"/modules/softwaremanagementplans/practicalguide","_dir":"softwaremanagementplans","_draft":false,"_partial":false,"_locale":"","title":"Practical Guide","description":"","type":"reading","order":3,"_type":"markdown","_id":"local_fs:modules:softwaremanagementplans:practicalguide.md","_source":"local_fs","_file":"modules/softwaremanagementplans/practicalguide.md","_stem":"modules/softwaremanagementplans/practicalguide","_extension":"md","plainText":"---\ntitle: Practical Guide\ntype: reading\norder: 3\n---\n\n\n## Practical Guide to Software Management Plans (15 minutes)\n\nResearch software plays a crucial role in academic research and has become a key output of many research projects. A software management plan helps to implement best practices during software development and ensures that software is accessible and reusable in the short and longer term. It also contributes to the reproducibility of results and stimulates collaborative work on open-source software for research.\n\nIn practice, a software management plan helps:\n\n- Assess whether developing new software is necessary\n- Plan to make the research software reusable and sustainable\n- Plan for necessary resources\n- Allow for verification of work that went into implementation\n\nIn the Practical Guide to Software Management plans, this is described in more detail:\n\n[A practical guide to software management plans](https://zenodo.org/record/7589725)\n\nAfter reading this guide, you should:\n\n- Be aware of different types of research software\n- Understand different demands placed on these types of software\n- Know about various aspects of software management\n- Be able to explain the importance of a software management plan for software sustainability.\n"},{"_path":"/modules/softwaremanagementplans/requirements","_dir":"softwaremanagementplans","_draft":false,"_partial":false,"_locale":"","title":"SMP requirements","description":"This section gives a brief explanation of each SMP requirement listed in the Practical Guide to Software Managament Plans. These represent different aspects of the software management for researchers to consider before (and while) embarking on a software related project\nNote that not each SMP actually needs to address every single requirement, as this depends on the \"level\" of the SMP in question. Please refer to the guide or our slides above for more information on SMP levels.","type":"reading","order":2,"_type":"markdown","_id":"local_fs:modules:softwaremanagementplans:requirements.md","_source":"local_fs","_file":"modules/softwaremanagementplans/requirements.md","_stem":"modules/softwaremanagementplans/requirements","_extension":"md","plainText":"---\ntitle: SMP requirements\ntype: reading\norder: 2\n---\n\n# **Requirements for a Software Management Plan**\n\nThis section gives a brief explanation of each SMP requirement listed in the [Practical Guide to Software Managament Plans](https://zenodo.org/records/7589725). These represent different aspects of the software management for researchers to consider before (and while) embarking on a software related project\nNote that not each SMP actually needs to address every single requirement, as this depends on the \"level\" of the SMP in question. Please refer to the guide or [our slides](#placeholder) above for more information on SMP levels.\n\n\n## **Purpose**\nThe software's purpose is the most important aspect of the SMP.\n\nIt allows you to be clear about the problem it addresses, and who the software is aimed at, as well as set boundaries on its scope.\nAddressing the limitations of the software, as well as the advantages it will provide, help determine its scope.\nThis will help the developers focus on the specific needs of the software.\n\n\n\n## **Engineering**\nis related to building the software\n\n#### **Version Control**\nhas a myriad of benefits: it allows keeping track of history and provenance, can support experimentation and collaboration, and is crucial for the identification of specific versions of the software.\n\n#### **Testing**\nensures that software continues to work as intended.\nThere are many different approaches to this: units of code can be tested in unit tests; entire workflows can be verified in integration tests; acceptance tests can be created to ensure specific requirements are met; regression testing can be done to ensure new changes do not break existing functionality; and so on.\nDeciding whether and if so what testing will be implemented is an important element of the SMP.\n\n#### **Packaging**\nis important for the distribution of software. The format in which the software will be distributed is an important decision that should be made early on.\n\n#### **Code Quality**\nshould be addressed: what standards will be adhered to, and how will they be measured and supported?\nThere are many tools that can help with this, and it is important to choose them early on to maintain consistent code quality throughout the project.\n\n\n\n## **Documentation**\nis an important component of software, and should be tailored to different audiences.\n\n#### **User Documentation**\nthe software's function should be explained, and instructions on how to use it should be provided.\n\n#### **Developer Documentation**\ninstructions on how to modify the software, and how to contribute to the project should be provided.\n\n#### **Deployment Documentation**\nexplains any system requirements (such as dependencies) for deploying the software, and installation and testing instructions.\n\n\n\n## **Project Management**\naddresses various conditions for the software's long-term sustainability and re-use.\n\n#### **License**\nAny reusable software should have an appropriate license, which is an important early decision.\n\n#### **Maintenance**\nWho will maintain the software and for how long? \nHow actively will user concerns be addressed?\nHow much time will this take?\nHow and when will it be retired?\n\n#### **Citation**\nHow will you collect information about its use? What DOI will you use for this?\n\n#### **Repository**\nwhere will the software be deposited and how accessible will it be?\nUsers should be able to obtain a functional copy of the software.\n\n#### **Resources**\nWhat resources - human, infrastructure, financial - will be needed, and when?\n\n#### **Risk Analysis**\nAre there privacy or security concerns?\nIs there potential for vendor lock, or other considerations for future reliability and reuse?\nWhat are the consequences of software failure and how will these be mitigated?\n"}]