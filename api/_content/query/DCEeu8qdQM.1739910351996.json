[{"_path":"/modules/documentation/info","_dir":"documentation","_draft":false,"_partial":false,"_locale":"","title":"Learning objectives","description":"In this module you will learn to answer the following questions:","type":"info","order":0,"_type":"markdown","_id":"local_fs:modules:documentation:info.md","_source":"local_fs","_file":"modules/documentation/info.md","_stem":"modules/documentation/info","_extension":"md","plainText":"---\ntitle: Learning objectives\ntype: info\norder: 0\n---\n\nIn this module you will learn to answer the following questions:\n\n- What is code documentation?\n- Why is documentation considered best practice in software development and how do I communicate that to researchers?\n- What are some of the ways code is documented in practice?\n"},{"_path":"/modules/documentation/slides_documentation","_dir":"documentation","_draft":false,"_partial":false,"_locale":"","title":"Documentation","description":"===","type":"slides","order":1,"author":"Luisa Orozco, Barbara Vreede, Jaro Camphuijsen, Carlos Martinez, Max Paulus, Robin Richardson","_type":"markdown","_id":"local_fs:modules:documentation:slides_documentation.md","_source":"local_fs","_file":"modules/documentation/slides_documentation.md","_stem":"modules/documentation/slides_documentation","_extension":"md","plainText":"---\ntitle: Documentation\ntype: slides\norder: 1\nauthor: Luisa Orozco, Barbara Vreede, Jaro Camphuijsen, Carlos Martinez, Max Paulus, Robin Richardson\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Documentation\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What is documentation?\n\n- Provides context for your work\n- Explains what this is and how to use it\n- Explains what has been done and why\n\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Why document software?\n\nMake your software reusable:\n\n- A user should be able to run your software in the same way as you do now \n- A user should be able to install your software\n- A contributor should be able to add to, improve, or fix code\n\nnote:\n\n\"a contributor\" includes future you. Don't touch your code for a year or two and you will not immediately remember the decisions that you made in the past.\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Documentation types\n\nDocumentation can have different purposes:\n\n- **User documentation**\n<!-- .element: class=\"fragment\" data-fragment-index=\"1\" -->\n  - What does the software do? How can it be used?\n<!-- .element: class=\"fragment\" data-fragment-index=\"1\" -->\n- **Developer documentation**\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n  - How can your software be modified or extended? Why were certain development choices made.\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n- **Deployment documentation**\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n  - How to install the software? What hardware and other software is needed?\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Documentation formats\n\n<!-- add visual with documentation format with increasing complexity -->\n\n- README: simple text file, first thing that users/collaborators see\n- In-code: intended for developers (comments, docstrings, ...)\n- Websites, Wikis\n- Tutorials\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good README file\n\n+ README file is first thing a user/collaborator sees\n+ What should be included in README files?\n<ul>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n</ul>\n\n\nNote:\n+ A descriptive project title\n+ Motivation (why the project exists) and basics\n+ Installation / How to setup\n+ Copy-pasteable quick start code example\n+ Usage reference (if not elsewhere)\n+ Recommended citation if someone uses it\n+ Other related tools (\"see also\")\n+ Contact information for the developer(s)\n+ License information\n+ Contributing guidelines\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## In-code documentation?\n\n- Code comments:\n  - Provide context for (complex parts) of the code\n  - Explains certain coding decisions\n  - Can often be replaced by better programming\n- Docstrings:\n  - Special comments that describe (use of) functions/classes/etc.\n  - Can be called by users/websites\n  - Follow a standardized syntax (per programming language)\n\n==\n\n<!-- .slide: data-state=\"standard\"  -->\n## Exercise: In-line comments\n\n**Comment A**\n\n<pre data-id=\"code-animation\"><code style=\"overflow: hidden;\" data-trim class=\"python\">\n# Now we check if temperature is larger than -50:\nif temperature > -50:\n    print('do something')\n</code></pre>\n\n**Comment B**\n\n<pre data-id=\"code-animation\"><code style=\"overflow: hidden;\" data-trim class=\"python\">\n# We regard temperatures below -50 degrees as measurement errors\nif temperature > -50:\n    print('do something')\n</code></pre>\n\n- How are these different? Which one do you prefer?\n- Can you think of a way to avoid using comments altogether?\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## User/API documentation\n\n+ What if a README file is not enough?\n+ Use tools to create API documentation from existing docstrings\n\nnote:\n\ntools include\n\n+ **Sphinx** / **mkdocs** (documentation generator)\n  - creates nicely-formatted HTML pages out of .md or .rst files\n  - programming language independent\n+ **Github pages** (deploy your documentation)\n  - set up inside your GitHub repository\n  - automatically deploys documentation generated above\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n## Tutorials\n\n+ Example code that allows users to run specific test cases \n+ Jupyter notebooks are often used for this purpose\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Take-home message\n\n- Documentation is a vital part of a project.\n- It should be kept and created alongside the corresponding code.\n- Depending on the purpose/scope documentation needs to meet different criteria.\n- Documentation can take many shapes.\n\n===\n\n<!-- .slide: data-state=\"keepintouch\" -->\n\nwww.esciencecenter.nl\n\ninfo@esciencecenter.nl\n\n020 - 460 47 70\n"}]