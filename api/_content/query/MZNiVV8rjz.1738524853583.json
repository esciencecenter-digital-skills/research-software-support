[{"_path":"/modules/softwaremanagementplans/templatebuilding","_dir":"softwaremanagementplans","_draft":false,"_partial":false,"_locale":"","title":"Build a Template","description":"In a live setting, this exercise is done in groups.\nEach group will be assigned a software project.\nThe group will then create an SMP template for this project.","type":"exercise","order":5,"_type":"markdown","_id":"local_fs:modules:softwaremanagementplans:templatebuilding.md","_source":"local_fs","_file":"modules/softwaremanagementplans/templatebuilding.md","_stem":"modules/softwaremanagementplans/templatebuilding","_extension":"md","plainText":"---\ntitle: Build a Template\ntype: exercise\norder: 5\n---\n\n# Build your own Software Management Plan template\n\n*In a live setting, this exercise is done in groups.\nEach group will be assigned a software project.\nThe group will then create an SMP template for this project.*\n\n## Step 1: Choose a software project\n\nChoose a software project for this exercise, preferably one you are familiar with.\n\nIf you don't have a project in mind, you can use one of the following:\n\n- [ESMValTool](https://research-software-directory.org/software/esmvaltool)\n- [LitStudy](https://research-software-directory.org/software/litstudy)\n- [Haddock](https://research-software-directory.org/software/haddock3)\n- [worcs](https://cjvanlissa.github.io/worcs/index.html)\n- [democracy-topic-modelling](https://research-software-directory.org/software/democracy-topic-modelling)\n\nFind the Practical Guide at [tinyurl.com/SMP-guide](https://doi.org/10.5281/zenodo.7589725).\n\n## Step 2: Building blocks\n\n- Print the following [figure from the Practical Guide](media/SMP-requirements.pdf) and cut out the various hexagons/requirements. \n- Look at the software repository or page in the Research Software Directory or any other information you can find about your software. \n- Take a fresh sheet of paper and some glue and glue the requirements that you think are relevant to your chosen software. You can also use the physical space on your sheet of paper to group the various requirements together. \n\nFor this, use the following considerations (section 5 in [the guide](https://doi.org/10.5281/zenodo.7589725)):\n\n1. **Purpose**. What is the current reason or expected end-use for developing the software?\n2. **Reliability**. The effect of software failure and/or non-maintenance on:\n    - Risk of harm to self or others. This includes injury, privacy violation, bias, and inappropriate content.\n    - Reputation. For example to self, institution or other.\n    - Research, either your own or of others. This effect could be due to an obvious software failure (\"crash\") or a hidden one, for example, returning inconsistent numerical results on different operating systems.\n3. **Maintenance**. The long-term effort needed to maintain the software as long as it might be used as a standalone tool or dependency. This includes maintenance functions that can extend beyond the lifespan of the original development project and includes fixing bugs, dependency management, operating system compatibility, and security issues.\n\n\n## Step 3: Assess your template\n\n- Assess what level of management (low, medium, high) your custom template matches most. \n- What is different from your custom template and the default management level template? Does this difference make sense?\n- Finally use section 6 (Implementation Examples) from the [Practical Guide to Software Management Plans](https://doi.org/10.5281/zenodo.7589725) to create the Software Management Plan template with questions that a researcher/developer would have to answer. \n"},{"_path":"/modules/testing/exercise1","_dir":"testing","_draft":false,"_partial":false,"_locale":"","title":"Exercise 1","description":"Choose an alternative that correctly answers the following questions:","type":"exercise","order":4,"_type":"markdown","_id":"local_fs:modules:testing:exercise1.md","_source":"local_fs","_file":"modules/testing/exercise1.md","_stem":"modules/testing/exercise1","_extension":"md","plainText":"---\ntitle: Exercise 1\ntype: exercise\norder: 4\n---\n\n# Exercise 1\n\nChoose an alternative that correctly answers the following questions:\n\n**1.1 What is software testing?**\n\na) A method for evaluating a software's compatibility with different operating systems.\n\nb) The process of releasing updates and patches for software.\n\nc) The process of verifying and validating that a software meets the required specifications and works as intended.\n\nd) A step in the software lifecycle focused on community engagement and feedback.\n\ne) The practice of documenting software functionalities.\n\n---\n\n**1.2 Why is software testing important?**\n\na) To build and maintain the community's trust by demonstrating commitment to quality.\n\nb) To identify and fix bugs, ensure the software meets required standards, and assess its reliability and reproducibility.\n\nc) To design the software's user interface and graphics.\n\nd) To accelerate the overall software development process.\n\ne) To facilitate easier collaboration among developers.\n\n---\n\n<small> **answers:** \n1.1 c) \n1.2 The most obvious answer is b), but in fact all answers except c) are correct\n</small>\n"}]