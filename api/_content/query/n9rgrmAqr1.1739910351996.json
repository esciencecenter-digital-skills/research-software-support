[{"_path":"/modules/documentation/slides_documentation","_dir":"documentation","_draft":false,"_partial":false,"_locale":"","title":"Documentation","description":"===","type":"slides","order":1,"author":"Luisa Orozco, Barbara Vreede, Jaro Camphuijsen, Carlos Martinez, Max Paulus, Robin Richardson","_type":"markdown","_id":"local_fs:modules:documentation:slides_documentation.md","_source":"local_fs","_file":"modules/documentation/slides_documentation.md","_stem":"modules/documentation/slides_documentation","_extension":"md","plainText":"---\ntitle: Documentation\ntype: slides\norder: 1\nauthor: Luisa Orozco, Barbara Vreede, Jaro Camphuijsen, Carlos Martinez, Max Paulus, Robin Richardson\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Documentation\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What is documentation?\n\n- Provides context for your work\n- Explains what this is and how to use it\n- Explains what has been done and why\n\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Why document software?\n\nMake your software reusable:\n\n- A user should be able to run your software in the same way as you do now \n- A user should be able to install your software\n- A contributor should be able to add to, improve, or fix code\n\nnote:\n\n\"a contributor\" includes future you. Don't touch your code for a year or two and you will not immediately remember the decisions that you made in the past.\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Documentation types\n\nDocumentation can have different purposes:\n\n- **User documentation**\n<!-- .element: class=\"fragment\" data-fragment-index=\"1\" -->\n  - What does the software do? How can it be used?\n<!-- .element: class=\"fragment\" data-fragment-index=\"1\" -->\n- **Developer documentation**\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n  - How can your software be modified or extended? Why were certain development choices made.\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n- **Deployment documentation**\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n  - How to install the software? What hardware and other software is needed?\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\" -->\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Documentation formats\n\n<!-- add visual with documentation format with increasing complexity -->\n\n- README: simple text file, first thing that users/collaborators see\n- In-code: intended for developers (comments, docstrings, ...)\n- Websites, Wikis\n- Tutorials\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## A good README file\n\n+ README file is first thing a user/collaborator sees\n+ What should be included in README files?\n<ul>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n  <li contenteditable=\"true\">...</li>\n</ul>\n\n\nNote:\n+ A descriptive project title\n+ Motivation (why the project exists) and basics\n+ Installation / How to setup\n+ Copy-pasteable quick start code example\n+ Usage reference (if not elsewhere)\n+ Recommended citation if someone uses it\n+ Other related tools (\"see also\")\n+ Contact information for the developer(s)\n+ License information\n+ Contributing guidelines\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## In-code documentation?\n\n- Code comments:\n  - Provide context for (complex parts) of the code\n  - Explains certain coding decisions\n  - Can often be replaced by better programming\n- Docstrings:\n  - Special comments that describe (use of) functions/classes/etc.\n  - Can be called by users/websites\n  - Follow a standardized syntax (per programming language)\n\n==\n\n<!-- .slide: data-state=\"standard\"  -->\n## Exercise: In-line comments\n\n**Comment A**\n\n<pre data-id=\"code-animation\"><code style=\"overflow: hidden;\" data-trim class=\"python\">\n# Now we check if temperature is larger than -50:\nif temperature > -50:\n    print('do something')\n</code></pre>\n\n**Comment B**\n\n<pre data-id=\"code-animation\"><code style=\"overflow: hidden;\" data-trim class=\"python\">\n# We regard temperatures below -50 degrees as measurement errors\nif temperature > -50:\n    print('do something')\n</code></pre>\n\n- How are these different? Which one do you prefer?\n- Can you think of a way to avoid using comments altogether?\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n\n## User/API documentation\n\n+ What if a README file is not enough?\n+ Use tools to create API documentation from existing docstrings\n\nnote:\n\ntools include\n\n+ **Sphinx** / **mkdocs** (documentation generator)\n  - creates nicely-formatted HTML pages out of .md or .rst files\n  - programming language independent\n+ **Github pages** (deploy your documentation)\n  - set up inside your GitHub repository\n  - automatically deploys documentation generated above\n\n===\n\n<!-- .slide: data-state=\"standard\"  -->\n## Tutorials\n\n+ Example code that allows users to run specific test cases \n+ Jupyter notebooks are often used for this purpose\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Take-home message\n\n- Documentation is a vital part of a project.\n- It should be kept and created alongside the corresponding code.\n- Depending on the purpose/scope documentation needs to meet different criteria.\n- Documentation can take many shapes.\n\n===\n\n<!-- .slide: data-state=\"keepintouch\" -->\n\nwww.esciencecenter.nl\n\ninfo@esciencecenter.nl\n\n020 - 460 47 70\n"},{"_path":"/modules/licenses/copyright","_dir":"licenses","_draft":false,"_partial":false,"_locale":"","title":"Copyright","description":"","type":"reading","order":2,"_type":"markdown","_id":"local_fs:modules:licenses:copyright.md","_source":"local_fs","_file":"modules/licenses/copyright.md","_stem":"modules/licenses/copyright","_extension":"md","plainText":"---\ntitle: Copyright\ntype: reading\norder: 2\n---\n\n## Copyright and software (2 minutes)\n\nCreative works, like books, paintings and music, but also scientific articles and software, are covered by copyright. Copyright is a legal construct that gives the owner of the copyright on a work the exclusive right to reproduce, modify, publicly perform and distribute the work. As a result, anyone who is not the copyright holder needs to have permission from the copyright holder to also be able to do so.\n\nNewly created works are automatically covered by copyright. This copyright is owned by the creator of the work, unless they were employed and created the work as part of their employment, in which case their employer owns the work. If multiple persons or organisations contribute to a work, then they each own a share of the copyright, and all need to give permission for others to be able to do any of the things protected by copyright. This permission is called a *license*.\n\nCreative works can depend on each other. Books for example can be translated, or turned into a stage play or a TV series. This creates a new work, which is known as a derivative work. A derivative work has its own copyright, because creating a translation or adaptation is itself a creative process. Like in a collaborative work, both the owner of the original copyright and the owner of the copyright on the derived adaptation need to give permission to reproduce and distribute the derived work.\n\nSoftware is a bit different from books or films or even databases because software is not only a collection of words and symbols, but also a machine that is used for something. As a result, working processes around software are quite different from those around books or films. Although it's bad practice, researchers quite often take a script from a colleague and modify it a bit so that it does what they want. A film director would be surprised indeed if you suggested they take a script from an existing film, change the dialog in the third act a bit, and then shoot it, but in software that's common. No novelist downloads ready-made paragraphs and chapters from the Internet and glues them together into a novel, but this is essentially how all modern software is developed.\n\nAs a result, software and copyright is a bit of a specialist topic, but one that cannot be avoided because of the automatic nature of copyright and the fact that science is a collaborative enterprise. Universities therefore need a policy to govern what their employees should do and can't do with respect to the software they develop and use, and that policy needs to include something specifically about licensing software.\n\n"}]