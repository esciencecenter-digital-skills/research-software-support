[{"_path":"/modules/citation/slides-citation","_dir":"citation","_draft":false,"_partial":false,"_locale":"","title":"Software Citation","description":"===","type":"slides","order":1,"_type":"markdown","_id":"local_fs:modules:citation:slides-citation.md","_source":"local_fs","_file":"modules/citation/slides-citation.md","_extension":"md","plainText":"---\ntitle: Software Citation\ntype: slides\norder: 1\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Software Citation\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Why would you cite software?\n- Understanding Research Fields\n- Credit for the researcher\n- Recognition of the software\n- Discovering Software\n- Reproducibility\n\n\nNote:\n\n**Understanding Research Fields**: Software is a product of research, and by not citing it, we leave holes in the record of research of progress in those fields.\n\n**Credit**: Academic researchers at all levels, including students, postdocs, faculty, and staff, should be credited for the software products they develop and contribute to, particularly when those products enable or further research done by others. Non-academic researchers should also be credited for their software work, though the specific forms of credit are different than for academic researchers.\n\n**Discovering Software**: Citations enable the specific software used in a research product to be found. Additional researchers can then use the same software for different purposes, leading to credit for those responsible for the software.\n\n**Reproducibility**: Citation of specific software used is necessary for reproducibility, although not sufficient. Additional information such as configurations and platform issues are also needed.\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## The software citation principles\n\n- Importance\n- Credit and attribution\n- Unique Identification\n- Persistence\n- Accessibility\n- Specificity\n\n\n\nNote:\n\n**Importance**: Software should be considered a legitimate and citable product of research. Software citations should be accorded the same importance in the scholarly record as citations of other research products, such as publications and data; they should be included in the metadata of the citing work, for example in the reference list of a journal article, and should not be omitted or separated. Software should be cited on the same basis as any other research product such as a paper or a book, that is, authors should cite the appropriate set of software products just as they cite the appropriate set of papers.\n\n**Credit and Attribution**: Software citations should facilitate giving scholarly credit and normative, legal attribution to all contributors to the software, recognizing that a single style or mechanism of attribution may not be applicable to all software.\n\n**Unique Identification**: A software citation should include a method for identification that is machine actionable, globally unique, interoperable, and recognized by at least a community of the corresponding domain experts, and preferably by general public researchers.\n\n**Persistence**: Unique identifiers and metadata describing the software and its disposition should persist – even beyond the lifespan of the software they describe.\n\n**Accessibility**: Software citations should facilitate access to the software itself and to its associated metadata, documentation, data, and other materials necessary for both humans and machines to make informed use of the referenced software.\n\n**Specificity**: Software citations should facilitate identification of, and access to, the specific version of software that was used. Software identification should be as specific as necessary, such as using version numbers, revision numbers, or variants such as platforms.\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## What software to cite?\n\n*\"\"...the software itself should be cited on the same basis as any other research product; authors should cite the appropriate set of software products.\"*\n\nWhich software would you cite?\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## How to make your software citable?\n##  \n## `CITATION.cff`\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n```\ncff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n  - family-names: Druskat\n    given-names: Stephan\n    orcid: https://orcid.org/1234-5678-9101-1121\ntitle: \"My Research Software\"\nversion: 2.0.4\nidentifiers:\n  - type: doi\n    value: 10.5281/zenodo.1234\ndate-released: 2021-08-11\n```\n\n===\n\n<!-- .slide: data-state=\"keepintouch\" -->\n\n\nwww.esciencecenter.nl\n\ninfo@esciencecenter.nl\n\n020 - 460 47 70\n"},{"_path":"/modules/fairsoftware/exercise2","_dir":"fairsoftware","_draft":false,"_partial":false,"_locale":"","title":"Mapping the principles","description":"","type":"exercise","order":3,"_type":"markdown","_id":"local_fs:modules:fairsoftware:exercise2.md","_source":"local_fs","_file":"modules/fairsoftware/exercise2.md","_extension":"md","plainText":"---\ntitle: Mapping the principles\ntype: exercise\norder: 3\n---\n\n## Exercise: Mapping the principles\n\n### The FAIR4RS Principles are:\n\n#### F: Software, and its associated metadata, is easy for both humans and machines to find.\n\n- F1. Software is assigned a globally unique and persistent identifier.\n  - F1.1. Components of the software representing levels of granularity are assigned distinct identifiers.\n  - F1.2. Different versions of the software are assigned distinct identifiers.\n- F2. Software is described with rich metadata.\n- F3. Metadata clearly and explicitly include the identifier of the software they describe.\n- F4. Metadata are FAIR, searchable and indexable.\n\n#### A: Software, and its metadata, is retrievable via standardised protocols.\n\n- A1. Software is retrievable by its identifier using a standardised communications protocol.\n  - A1.1. The protocol is open, free, and universally implementable.\n  - A1.2. The protocol allows for an authentication and authorization procedure, where necessary.\n- A2. Metadata are accessible, even when the software is no longer available.\n\n#### I: Software interoperates with other software by exchanging data and/or metadata, and/or through interaction via application programming interfaces (APIs), described through standards.\n\n- I1. Software reads, writes and exchanges data in a way that meets domain-relevant community standards.\n- I2. Software includes qualified references to other objects.\n\n#### R: Software is both usable (can be executed) and reusable (can be understood, modified, built upon, or incorporated into other software).\n\n- R1. Software is described with a plurality of accurate and relevant attributes.\n  - R1.1. Software is given a clear and accessible license.\n  - R1.2. Software is associated with detailed provenance.\n- R2. Software includes qualified references to other software.\n- R3. Software meets domain-relevant community standards.\n\n### Three examples\n\nThe following three examples of software have been described with statements that can be mapped to the FAIR4RS Principles. With each statement, identify the principle(s) it maps to, and the (sub)facet(s) of the principle(s) it addresses. A single statement may map to multiple (sub)facets.\n\n#### Example 1: [Comet](https://doi.org/10.1002/pmic.201200439)\n\n[Comet](https://doi.org/10.1002/pmic.201200439) is a command-line tool and desktop application for tandem mass spectrometry sequence database search6.\n\n- Comet is licensed under the Apache 2.0 open source licence.\n- Comet is registered in the bio.tools catalogue of bioinformatics tools, where it has a globally unique and persistent identifier, and rich metadata that includes the identifier and is searchable and indexable.\n- The metadata in bio.tools is independent from the Comet repository, and will stay accessible should the software itself become inaccessible.\n- The publicly accessible project repository on GitHub includes detailed information about the development of Comet.\n- The code includes dependencies to external software packages, such as Thermo Scientific’s MSFileReader library.\n- Comet can be downloaded via the browser following the links provided in the metadata using https.\n- Comet uses standard data types from the proteomics domain for its input and output data that are documented in the metadata as functional annotations.\n\n#### Example 2: [PureGoMe](https://doi.org/10.5281/zenodo.4337242)\n\n[PureGoMe](https://doi.org/10.5281/zenodo.4337242) is a project aimed at understanding Dutch public sentiment during the COVID-19 outbreak period by analysing real-time Twitter data. It provides a collection of Python scripts and Jupyter notebooks for this purpose.\n\n- PureGoMe can be downloaded from the project repository, while metadata is accessible independently from the registry.\n- PuReGoMe's GitHub repository has detailed records of the development history.\n- The code includes dependencies to other software, such as various Python libraries.\n- PuReGoMe has a (versioned) DOI from Zenodo.\n- PuReGoMe uses the Apache 2.0 open source licence.\n- PuReGoMe uses standard file formats (e.g., CSV files) for data exchange.\n- PuReGoMe refers to other objects such as websites.\n- PureGoMe is registered in the Research Software Directory that captures the most relevant metadata, including the identifier, in searchable and indexable form.\n\n#### Example 3: [gammaShiny](https://doi.org/10.5281/zenodo.4139005)\n\n[gammaShiny](https://doi.org/10.5281/zenodo.4139005) is an application that provides enhanced graphical user interfaces for the R gamma package8. It is used to process in-situ gamma-ray spectrometry measurements for luminescence dating.\n\n- gammaShiny has been deposited in the HAL French national archive and it has a persistent globally unique identifier, with the HAL identifier of the metadata record and a SWHID, identifying specifically the software artefact on the Software Heritage universal software source code archive.\n- Thanks to the HAL platform, where a licence is mandatory, gammaShiny is under a GNU General Public Licence v3.0.\n- The archived versions of gammaShiny’s source code in Software Heritage include a codemeta.json file, identifiable with a SWHID, where other metadata is available including dependencies named in CodeMeta (\"softwareRequirements\").\n\n### Do you agree?\n\nThe examples were taken from [this paper](https://doi.org/10.1038/s41597-022-01710-x).\nIn the Results section of the paper you will find the authors' analysis of the software, which contains the statements above, mapped to the FAIR4RS Principles.\n\nDo you agree with their assessment?"}]