[{"_path":"/modules/version-control/info","_dir":"version-control","_draft":false,"_partial":false,"_locale":"","title":"Learning objectives","description":"","type":"info","order":0,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"learning-objectives"},"children":[{"type":"text","value":"Learning Objectives"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Explain what version control of research software is"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Illustrate the importance of using version control"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Identify when in the research cycle to employ version control"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Compare the use of local and remote version control"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"List the various tools or systems for version control"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Identify relevant resources for researchers about features commonly used in version control"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"learning-objectives","depth":2,"text":"Learning Objectives"}]}},"_type":"markdown","_id":"local_fs:modules:version-control:info.md","_source":"local_fs","_file":"modules/version-control/info.md","_extension":"md","plainText":"---\ntitle: Learning objectives\ntype: info\norder: 0\n---\n\n## Learning Objectives\n- Explain what version control of research software is\n- Illustrate the importance of using version control\n- Identify when in the research cycle to employ version control\n- Compare the use of local and remote version control\n- List the various tools or systems for version control\n- Identify relevant resources for researchers about features commonly used in version control"},{"_path":"/modules/version-control/slides-version-control","_dir":"version-control","_draft":false,"_partial":false,"_locale":"","title":"Version Control Slides","description":"What is version control and why should I use it?","type":"slides","order":1,"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"version-control"},"children":[{"type":"text","value":"Version Control"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"What is version control and why should I use it?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nYou are probably using version control every day. Word documents store a history of changes for you, which you can undo."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"img","props":{"src":"https://swcarpentry.github.io/git-novice/fig/phd101212s.png","width":"45%"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"small","props":{},"children":[{"type":"text","value":" \"Piled Higher and Deeper‚Äù by Jorge Cham, "},{"type":"element","tag":"a","props":{"href":"http://www.phdcomics.com","rel":["nofollow"]},"children":[{"type":"text","value":"http://www.phdcomics.com"}]},{"type":"text","value":" "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"documents-are"},"children":[{"type":"text","value":"Documents are..."}]},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n  a series of changes\n  "},{"type":"element","tag":"img","props":{"style":"height: 30vh; margin: 0; padding: 0;","src":"https://swcarpentry.github.io/git-novice/fig/play-changes.svg"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nIn version control systems, documents start with a base version and record all the changes that happened on top of that base version. Because of this you can always \"play back\" to an earlier version, while it does not store duplicates."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"changes-are-stored"},"children":[{"type":"text","value":"Changes are stored"}]},{"type":"element","tag":"img","props":{"src":"/modules/version-control/media/git-diff.png","width":"80%","style":{"aspectRatio":"788/271"}},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nA version control system (like git) keeps track of the individual changes for us."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"changes-are-stored-1"},"children":[{"type":"text","value":"Changes are stored"}]},{"type":"element","tag":"img","props":{"src":"/modules/version-control/media/git-log.png","width":"80%","style":{"aspectRatio":"737/434"}},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nThe changes are stored along with some useful metadata. A set of changes, along with its metadata is called a \"commit\"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"more-than-one"},"children":[{"type":"text","value":"More than one..."}]},{"type":"element","tag":"div","props":{"style":"float: left; width: 49%;"},"children":[{"type":"text","value":"\n  independent changes\n  "},{"type":"element","tag":"img","props":{"style":"height: 350px; aspect-ratio: 327/308;","src":"/modules/version-control/media/versions.svg"},"children":[]}]},{"type":"element","tag":"div","props":{"style":"float: right; width: 49%;"},"children":[{"type":"text","value":"\n  can be merged\n  "},{"type":"element","tag":"img","props":{"style":"height: 350px; aspect-ratio: 335/307;","src":"/modules/version-control/media/merge.svg"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nWhen collaborating you might have various versions (sets of changes) that co-exist at the same time on so called \"branches\"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As long as the changes are not made to the same section (line of text) in a document ("},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"conflict!"}]},{"type":"text","value":"), the various changes can be merged together."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"collaboration"},"children":[{"type":"text","value":"Collaboration"}]},{"type":"element","tag":"img","props":{"style":"height: 350px;","src":"https://www.researchgate.net/profile/Mark-Ziemann/publication/371671830/figure/fig2/AS:11431281168661745@1687060872300/Distributed-version-control-Adapted-from-48.png","alt":"Distributed version control. Adapted from [48]."},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"small","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.researchgate.net/figure/Distributed-version-control-Adapted-from-48_fig2_371671830","rel":["nofollow"]},"children":[{"type":"text","value":"The five pillars of computational reproducibility: Bioinformatics and beyond"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nCollaborative code developers often make use of a remote server (like GitHub, or GitLab) as a central repository from which all other repositories derive. But this is not the only way you can use version control to do collaborative development."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"some-terminology"},"children":[{"type":"text","value":"Some terminology"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Files can be stored in:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"working directory"}]},{"type":"text","value":": the files you can see"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"staging area / index"}]},{"type":"text","value":": files about to be committed"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"local repository"}]},{"type":"text","value":": the permanent record"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"remote repository"}]},{"type":"text","value":": a copy of the repository which is stored online and often acts as the central repository"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"the-right-tool"},"children":[{"type":"text","value":"The right tool?"}]},{"type":"element","tag":"img","props":{"src":"/modules/version-control/media/repository_logos.png","width":"90%","style":{"aspectRatio":"1920/1080"}},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"note:\nMany different tools exist specifically for collaborative version control of computer source code and other simple text-based documents. It is often good to know what is the default or most-used tool in your university, institute or group."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Git (for version control) with Gitlab and Github (for collaboration) are the mainstream, used by many and with lots of features. You might run into projects using other repositories."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"==="}]},{"type":"element","tag":"h2","props":{"id":"key-points"},"children":[{"type":"text","value":"Key Points"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Version control is like unlimited "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"undo"}]},{"type":"text","value":" in MS Word, and more"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Version control also allows many people to work in parallel"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"For collaborative development a remote, cloud hosted repository is often used as central hub"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"documents-are","depth":2,"text":"Documents are..."},{"id":"changes-are-stored","depth":2,"text":"Changes are stored"},{"id":"changes-are-stored-1","depth":2,"text":"Changes are stored"},{"id":"more-than-one","depth":2,"text":"More than one..."},{"id":"collaboration","depth":2,"text":"Collaboration"},{"id":"some-terminology","depth":2,"text":"Some terminology"},{"id":"the-right-tool","depth":2,"text":"The right tool?"},{"id":"key-points","depth":2,"text":"Key Points"}]}},"_type":"markdown","_id":"local_fs:modules:version-control:slides-version-control.md","_source":"local_fs","_file":"modules/version-control/slides-version-control.md","_extension":"md","plainText":"---\ntitle: Version Control Slides\ntype: slides\norder: 1\n---\n\n<!-- .slide: data-state=\"title\"  -->\n\n# Version Control\n\nWhat is version control and why should I use it?\n\nnote:\nYou are probably using version control every day. Word documents store a history of changes for you, which you can undo. \n\n===\n\n<!-- .slide: data-state=\"standard center\" -->\n<img src=\"https://swcarpentry.github.io/git-novice/fig/phd101212s.png\" width=\"45%\">\n\n<small> \"Piled Higher and Deeper‚Äù by Jorge Cham, http://www.phdcomics.com </small>\n\n===\n\n<!-- .slide: data-state=\"standard center\"  -->\n## Documents are...\n\n<div >\n  a series of changes\n  <img style=\"height: 30vh; margin: 0; padding: 0;\" src=\"https://swcarpentry.github.io/git-novice/fig/play-changes.svg\"/>\n</div>\n\nnote:\nIn version control systems, documents start with a base version and record all the changes that happened on top of that base version. Because of this you can always \"play back\" to an earlier version, while it does not store duplicates.\n\n===\n\n\n<!-- .slide: data-state=\"standard center\" -->\n\n## Changes are stored\n\n<img src=\"media/git-diff.png\" width=\"80%\">\n\nnote:\nA version control system (like git) keeps track of the individual changes for us. \n\n===\n\n<!-- .slide: data-state=\"standard center\" -->\n\n## Changes are stored\n\n<img src=\"media/git-log.png\" width=\"80%\">\n\nnote:\nThe changes are stored along with some useful metadata. A set of changes, along with its metadata is called a \"commit\". \n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## More than one...\n\n<div style=\"float: left; width: 49%;\">\n  independent changes\n  <img style=\"height: 350px;\" src=\"media/versions.svg\"/>\n</div>\n\n<div style=\"float: right; width: 49%;\">\n  can be merged\n  <img style=\"height: 350px;\" src=\"media/merge.svg\"/>\n</div>\n\nnote:\nWhen collaborating you might have various versions (sets of changes) that co-exist at the same time on so called \"branches\".\n\nAs long as the changes are not made to the same section (line of text) in a document (**conflict!**), the various changes can be merged together. \n\n===\n\n<!-- .slide: data-state=\"standard center\" -->\n## Collaboration\n\n<img style=\"height: 350px;\" src=\"https://www.researchgate.net/profile/Mark-Ziemann/publication/371671830/figure/fig2/AS:11431281168661745@1687060872300/Distributed-version-control-Adapted-from-48.png\" alt=\"Distributed version control. Adapted from [48].\"/>\n\n<small>[The five pillars of computational reproducibility: Bioinformatics and beyond](https://www.researchgate.net/figure/Distributed-version-control-Adapted-from-48_fig2_371671830)</small>\n\n\nnote:\nCollaborative code developers often make use of a remote server (like GitHub, or GitLab) as a central repository from which all other repositories derive. But this is not the only way you can use version control to do collaborative development. \n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Some terminology\n\nFiles can be stored in:\n - **working directory**: the files you can see\n - **staging area / index**: files about to be committed\n - **local repository**: the permanent record\n - **remote repository**: a copy of the repository which is stored online and often acts as the central repository\n\n===\n\n<!-- .slide: data-state=\"standard center\" -->\n\n## The right tool?\n\n<img src=\"media/repository_logos.png\" width=\"90%\">\n\nnote:\nMany different tools exist specifically for collaborative version control of computer source code and other simple text-based documents. It is often good to know what is the default or most-used tool in your university, institute or group. \n\nGit (for version control) with Gitlab and Github (for collaboration) are the mainstream, used by many and with lots of features. You might run into projects using other repositories.\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n## Key Points\n- Version control is like unlimited **undo** in MS Word, and more\n- Version control also allows many people to work in parallel\n- For collaborative development a remote, cloud hosted repository is often used as central hub\n\n"},{"_path":"/modules/version-control/version_control_terminology","_dir":"version-control","_draft":false,"_partial":false,"_locale":"","title":"Terminology","description":"","type":"reading","order":2,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"terminology"},"children":[{"type":"text","value":"Terminology"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Branch"}]},{"type":"text","value":": Branches allow different sets of changes to co-exist. In this way, multiple people can work on the same (set of) files, and different \"themed\" changes can be developed in isolation. The main branch, from which all other branches (indirectly) are derived is often called \"trunk\". In practice this is done by having multiple commits (see below) point to the same parent commit. Branches are usually intended to \"merge\" back into the main branch or trunk."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Commit (noun)"}]},{"type":"text","value":": A commit or changeset is a set of alterations packaged together, along with meta-information  about the alterations. A commit/changeset describes the exact differences between two successive versions in the version control system's repository of changes along with information about the context of these changes, e.g. author, date, description (commit message) and a pointer to the parent commit."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Commit (verb)"}]},{"type":"text","value":": To write the changes made in a working copy into the repository using a \"commit (noun, see above)\"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Pull/push"}]},{"type":"text","value":": Copy revisions/commits from one repository into another. Pull is initiated by the receiving repository, while push is initiated by the source. Fetch is sometimes used as a synonym for pull, or to mean a pull followed by an update."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Pull/merge request"}]},{"type":"text","value":": Contributions to a source code repository that uses a distributed version control system are commonly made by means of a pull request or merge request (synonyms). The contributor requests the project maintainer to pull their changes, hence the name \"pull request\". The maintainer has to merge the pull request if the contribution should become part of the source base."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Repository"}]},{"type":"text","value":": In version control systems, a repository is a data structure that stores metadata for a set of files or directory structure."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Working copy"}]},{"type":"text","value":": The working copy is the local copy of files from a repository. All work done to the files in a repository is initially done on a working copy, hence the name."}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"terminology","depth":2,"text":"Terminology"}]}},"_type":"markdown","_id":"local_fs:modules:version-control:version_control_terminology.md","_source":"local_fs","_file":"modules/version-control/version_control_terminology.md","_extension":"md","plainText":"---\ntitle: Terminology\ntype: reading\norder: 2\n---\n\n## Terminology\n* **Branch**: Branches allow different sets of changes to co-exist. In this way, multiple people can work on the same (set of) files, and different \"themed\" changes can be developed in isolation. The main branch, from which all other branches (indirectly) are derived is often called \"trunk\". In practice this is done by having multiple commits (see below) point to the same parent commit. Branches are usually intended to \"merge\" back into the main branch or trunk.\n* **Commit (noun)**: A commit or changeset is a set of alterations packaged together, along with meta-information  about the alterations. A commit/changeset describes the exact differences between two successive versions in the version control system's repository of changes along with information about the context of these changes, e.g. author, date, description (commit message) and a pointer to the parent commit.\n* **Commit (verb)**: To write the changes made in a working copy into the repository using a \"commit (noun, see above)\". \n* **Pull/push**: Copy revisions/commits from one repository into another. Pull is initiated by the receiving repository, while push is initiated by the source. Fetch is sometimes used as a synonym for pull, or to mean a pull followed by an update. \n* **Pull/merge request**: Contributions to a source code repository that uses a distributed version control system are commonly made by means of a pull request or merge request (synonyms). The contributor requests the project maintainer to pull their changes, hence the name \"pull request\". The maintainer has to merge the pull request if the contribution should become part of the source base.\n* **Repository**: In version control systems, a repository is a data structure that stores metadata for a set of files or directory structure.\n* **Working copy**: The working copy is the local copy of files from a repository. All work done to the files in a repository is initially done on a working copy, hence the name."},{"_path":"/modules/version-control/version_control_exercise1","_dir":"version-control","_draft":false,"_partial":false,"_locale":"","title":"Case Study","description":"","type":"exercise","order":3,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"exercise-case-study"},"children":[{"type":"text","value":"Exercise: Case Study"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Case study"}]},{"type":"text","value":": A researcher comes to you with a problem of how to keep track of different versions of code."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"What advice would you give the researcher to keep track of changes of their scripts/code and when best to do this.\nWould you advise them to work with a local or remote version control system?"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"exercise-case-study","depth":2,"text":"Exercise: Case Study"}]}},"_type":"markdown","_id":"local_fs:modules:version-control:version_control_exercise1.md","_source":"local_fs","_file":"modules/version-control/version_control_exercise1.md","_extension":"md","plainText":"---\ntitle: Case Study\ntype: exercise\norder: 3\n---\n\n## Exercise: Case Study\n\n**Case study**: A researcher comes to you with a problem of how to keep track of different versions of code. \n\nWhat advice would you give the researcher to keep track of changes of their scripts/code and when best to do this. \nWould you advise them to work with a local or remote version control system? "},{"_path":"/modules/version-control/version_control_exercise2","_dir":"version-control","_draft":false,"_partial":false,"_locale":"","title":"Tool search","description":"","type":"exercise","order":4,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"exercise-tool-search"},"children":[{"type":"text","value":"Exercise: tool search"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In breakout groups of 3-4 people, identify 3 commonly used version control systems or tools that you have heard of (or used yourself) (for example: Git).\nTogether, search for a resource (such a website, or handbook) for each tool that helps explain how to use its key features."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"exercise-tool-search","depth":2,"text":"Exercise: tool search"}]}},"_type":"markdown","_id":"local_fs:modules:version-control:version_control_exercise2.md","_source":"local_fs","_file":"modules/version-control/version_control_exercise2.md","_extension":"md","plainText":"---\ntitle: Tool search\ntype: exercise\norder: 4\n---\n\n## Exercise: tool search\n\nIn breakout groups of 3-4 people, identify 3 commonly used version control systems or tools that you have heard of (or used yourself) (for example: Git). \nTogether, search for a resource (such a website, or handbook) for each tool that helps explain how to use its key features.  "},{"_path":"/modules/version-control/version_control_resources","_dir":"version-control","_draft":false,"_partial":false,"_locale":"","title":"Further reading","description":"","type":"reading","order":5,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"resources"},"children":[{"type":"text","value":"Resources"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://swcarpentry.github.io/git-novice/01-basics.html","rel":["nofollow"]},"children":[{"type":"text","value":"Version Control with Git: Automated Version Control (swcarpentry.github.io)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://the-turing-way.netlify.app/reproducible-research/vcs","rel":["nofollow"]},"children":[{"type":"text","value":"https://the-turing-way.netlify.app/reproducible-research/vcs"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://coderefinery.github.io/git-intro/","rel":["nofollow"]},"children":[{"type":"text","value":"https://coderefinery.github.io/git-intro/"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"resources","depth":2,"text":"Resources"}]}},"_type":"markdown","_id":"local_fs:modules:version-control:version_control_resources.md","_source":"local_fs","_file":"modules/version-control/version_control_resources.md","_extension":"md","plainText":"---\ntitle: Further reading\ntype: reading\norder: 5\n---\n\n## Resources\n\n[Version Control with Git: Automated Version Control (swcarpentry.github.io)](https://swcarpentry.github.io/git-novice/01-basics.html) \n\nhttps://the-turing-way.netlify.app/reproducible-research/vcs \n\nhttps://coderefinery.github.io/git-intro/"}]