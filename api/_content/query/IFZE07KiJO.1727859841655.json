[{"_path":"/modules/distributing/slides-distributing","_dir":"distributing","_draft":false,"_partial":false,"_locale":"","title":"Distributing Software","description":"===","type":"slides","order":1,"author":"Jaro Camphuijsen, Lourens Veen","_type":"markdown","_id":"local_fs:modules:distributing:slides-distributing.md","_source":"local_fs","_file":"modules/distributing/slides-distributing.md","_extension":"md","plainText":"---\ntitle: Distributing Software\ntype: slides\norder: 1\nauthor: Jaro Camphuijsen, Lourens Veen\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Distributing Software\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Why distribute?\n\n- For your future self\n- For others that might be interested\n- For reproducibility \n- For reusability\n\nnote:\nThere are many reasons why you would want to distribute your software. \n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Why can't I just publish and be done?\n\n- A piece of software never operates in isolation. \n- Depends on other software (third party packages, libraries)\n- Depends on system software (operating system, drivers, firmware)\n- Depends on hardware (your computer and the chips inside, display or printer)\n- The world (hardware, software, people) around your software is constantly evolving\n\nnote:\nSoftware by nature always depends on other software and hardware. \n\n===\n\n<!-- .slide: data-state=\"standard\" data-background-image=\"media/fire.png\"-->\n\nnote: Sometimes you enter dependency hell\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What issues may arise?\n\n- Many dependencies\n- Long chains of dependencies\n- Conflicting dependencies\n- Circular dependencies\n- Package manager dependencies\n- Diamond dependency\n\n... and all of these are changing.\n\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What solutions exist?\n\nIsolation or specification\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Isolation\n\n![Layers of isolation](media/distributing-software-layers.png)\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Specification\n\nLet the user (or some tool) solve the probem...\n\n- requirements.txt\n- environment.yml\n- pyproject.toml\n- package.json\netc...\n\nnote:\nSpecify the dependencies in a file and let the user build their own environment, container or vm.\n\n===\n\n## Considerations\n\n- Large amount of isolation enhances reproducibility but decreases flexibility.\n- Leaving it up to the user can be done for simple scripts (most research software)\n\n===\n\n## Rules of thumb   \n\n- Simple scripts can use a simple dependency specification\n- If other software might depend on this software, package it\n- To archive a specific software version and its environment, you could use a container\n\n==="},{"_path":"/modules/documentation/exercise-levels","_dir":"documentation","_draft":false,"_partial":false,"_locale":"","title":"Levels of documentation","description":"Joanne is working on her research software 'WeatherMap' that analyses and summarizes measurements from weather stations.","type":"exercise","order":3,"_type":"markdown","_id":"local_fs:modules:documentation:exercise-levels.md","_source":"local_fs","_file":"modules/documentation/exercise-levels.md","_extension":"md","plainText":"---\ntitle: Levels of documentation\ntype: exercise\norder: 3\n---\n\n# When to use which documentation?\nJoanne is working on her research software 'WeatherMap' that analyses and summarizes measurements from weather stations.\n\nHere is a list of possible forms of documentation:\n1. A basic README file containing: quick installation instructions, two lines explaining why the software was created, \ntwo basic examples of how you can use the software.\n2. A tutorial: 'Finding unusual patterns in daily average temperatures using WeatherMap'.\n3. In-code documentation: Comments in her code that explain why she made certain implementation choices.\n5. API reference: Detailed description of each function/class of WeatherMap.\n6. Overview of components: A detailed overview of each component in the software.\n7. User documentation: Extensive documentation on how users can use each of the functionalities of WeatherMap.\n8. Naming: Logical names for functions, modules, and classes so that it is immediately clear what the corresponding piece of code does.\n\n\nFor the following scenarios, which forms of documentation would you suggest Joanne to incorporate in her project:\n\n## Scenario A:\nJoanne just started her PhD and is the only one using WeatherMap to create results for her first paper. \nShe does not really care about anyone else using her software.\n\n## Scenario B:\nJoanne works together with a few other PhD students in her research group on the software. \nShe wants to make it easier for other researchers in her group to also adopt the software, \nand finds it important that when she moves on to a different job that the software can be still be used and improved in her absence.\n\n## Scenario C:\nJoanne and her colleagues spend half of their time updating and improving WeatherMap. \nThey have a large community of users around the globe that depend on WeatherMap for their research.\n"}]